plugins {
    alias(libs.plugins.quarkusPlugin)
    id 'java-library'
    id 'nu.studer.jooq'
}
dependencies {
    implementation enforcedPlatform(libs.quarkusPlatform)
    implementation libs.bundles.persistence
    jooqGenerator libs.quarkusJdbcPostgreSQL
    implementation libs.bundles.search
    implementation libs.bundles.protocol
    implementation libs.bundles.mq
    implementation libs.bundles.utils
    implementation libs.bundles.cache
    implementation libs.bundles.base
    implementation libs.bundles.registerCenterConsul
    System.getProperties().findAll() {
        o ->
            {
                print(o.getKey())
                print(o.getValue())
            }
    }
    def applicationEnv = new Properties()
    def envPropertiesFile = file('src/main/resources/application.properties')
    if (envPropertiesFile.exists()) {
        envPropertiesFile.withReader('UTF-8') { reader ->
            applicationEnv.load(reader)
        }
    }
    if ("prod" != applicationEnv.getProperty('quarkus.profile')){
        implementation libs.jooqMeta
        implementation libs.jooqCodegen
    }
    api libs.bundles.share
    testImplementation libs.bundles.test
}

quarkusBuild {
    nativeArgs {
        containerBuild = true
        builderImage = "quay.io/quarkus/ubi-quarkus-mandrel-builder-image:jdk-21"
    }
}
