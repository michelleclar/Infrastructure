/*
 * This file is generated by jOOQ.
 */
package org.carl.generated.tables.records;

import java.time.OffsetDateTime;
import org.carl.generated.tables.ImConversationMessages;
import org.carl.generated.tables.interfaces.IImConversationMessages;
import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes", "this-escape"})
public class ImConversationMessagesRecord extends UpdatableRecordImpl<ImConversationMessagesRecord>
        implements IImConversationMessages {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for
     * <code>public.im_conversation_messages.conversation_message_id</code>.
     */
    public ImConversationMessagesRecord setConversationMessageId(Long value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for
     * <code>public.im_conversation_messages.conversation_message_id</code>.
     */
    @Override
    public Long getConversationMessageId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>public.im_conversation_messages.created_at</code>.
     */
    public ImConversationMessagesRecord setCreatedAt(OffsetDateTime value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.im_conversation_messages.created_at</code>.
     */
    @Override
    public OffsetDateTime getCreatedAt() {
        return (OffsetDateTime) get(1);
    }

    /**
     * Setter for <code>public.im_conversation_messages.updated_at</code>.
     */
    public ImConversationMessagesRecord setUpdatedAt(OffsetDateTime value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>public.im_conversation_messages.updated_at</code>.
     */
    @Override
    public OffsetDateTime getUpdatedAt() {
        return (OffsetDateTime) get(2);
    }

    /**
     * Setter for <code>public.im_conversation_messages.member_from_id</code>.
     * 会话消息发送者
     */
    public ImConversationMessagesRecord setMemberFromId(Long value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>public.im_conversation_messages.member_from_id</code>.
     * 会话消息发送者
     */
    @Override
    public Long getMemberFromId() {
        return (Long) get(3);
    }

    /**
     * Setter for <code>public.im_conversation_messages.member_to_id</code>.
     * 会话消息接受者
     */
    public ImConversationMessagesRecord setMemberToId(Long value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>public.im_conversation_messages.member_to_id</code>.
     * 会话消息接受者
     */
    @Override
    public Long getMemberToId() {
        return (Long) get(4);
    }

    /**
     * Setter for <code>public.im_conversation_messages.message_id</code>.
     */
    public ImConversationMessagesRecord setMessageId(Long value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>public.im_conversation_messages.message_id</code>.
     */
    @Override
    public Long getMessageId() {
        return (Long) get(5);
    }

    /**
     * Setter for <code>public.im_conversation_messages.is_read</code>. 是否已读
     */
    public ImConversationMessagesRecord setIsRead(Boolean value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>public.im_conversation_messages.is_read</code>. 是否已读
     */
    @Override
    public Boolean getIsRead() {
        return (Boolean) get(6);
    }

    /**
     * Setter for <code>public.im_conversation_messages.is_rollback</code>. 是否回滚
     */
    public ImConversationMessagesRecord setIsRollback(Boolean value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for <code>public.im_conversation_messages.is_rollback</code>. 是否回滚
     */
    @Override
    public Boolean getIsRollback() {
        return (Boolean) get(7);
    }

    /**
     * Setter for <code>public.im_conversation_messages.is_visible_owner</code>.
     * 是否对自己可见
     */
    public ImConversationMessagesRecord setIsVisibleOwner(Boolean value) {
        set(8, value);
        return this;
    }

    /**
     * Getter for <code>public.im_conversation_messages.is_visible_owner</code>.
     * 是否对自己可见
     */
    @Override
    public Boolean getIsVisibleOwner() {
        return (Boolean) get(8);
    }

    /**
     * Setter for <code>public.im_conversation_messages.is_interact</code>.
     * 是否是互动消息
     */
    public ImConversationMessagesRecord setIsInteract(Boolean value) {
        set(9, value);
        return this;
    }

    /**
     * Getter for <code>public.im_conversation_messages.is_interact</code>.
     * 是否是互动消息
     */
    @Override
    public Boolean getIsInteract() {
        return (Boolean) get(9);
    }

    /**
     * Setter for <code>public.im_conversation_messages.is_agree</code>.
     * 当前互动消息状态
     */
    public ImConversationMessagesRecord setIsAgree(String value) {
        set(10, value);
        return this;
    }

    /**
     * Getter for <code>public.im_conversation_messages.is_agree</code>.
     * 当前互动消息状态
     */
    @Override
    public String getIsAgree() {
        return (String) get(10);
    }

    /**
     * Setter for <code>public.im_conversation_messages.scope</code>. 获取域
     */
    public ImConversationMessagesRecord setScope(String value) {
        set(11, value);
        return this;
    }

    /**
     * Getter for <code>public.im_conversation_messages.scope</code>. 获取域
     */
    @Override
    public String getScope() {
        return (String) get(11);
    }

    /**
     * Setter for <code>public.im_conversation_messages.conversation_id</code>.
     */
    public ImConversationMessagesRecord setConversationId(Long value) {
        set(12, value);
        return this;
    }

    /**
     * Getter for <code>public.im_conversation_messages.conversation_id</code>.
     */
    @Override
    public Long getConversationId() {
        return (Long) get(12);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    public void from(IImConversationMessages from) {
        setConversationMessageId(from.getConversationMessageId());
        setCreatedAt(from.getCreatedAt());
        setUpdatedAt(from.getUpdatedAt());
        setMemberFromId(from.getMemberFromId());
        setMemberToId(from.getMemberToId());
        setMessageId(from.getMessageId());
        setIsRead(from.getIsRead());
        setIsRollback(from.getIsRollback());
        setIsVisibleOwner(from.getIsVisibleOwner());
        setIsInteract(from.getIsInteract());
        setIsAgree(from.getIsAgree());
        setScope(from.getScope());
        setConversationId(from.getConversationId());
        resetChangedOnNotNull();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ImConversationMessagesRecord
     */
    public ImConversationMessagesRecord() {
        super(ImConversationMessages.IM_CONVERSATION_MESSAGES);
    }

    /**
     * Create a detached, initialised ImConversationMessagesRecord
     */
    public ImConversationMessagesRecord(
            Long conversationMessageId,
            OffsetDateTime createdAt,
            OffsetDateTime updatedAt,
            Long memberFromId,
            Long memberToId,
            Long messageId,
            Boolean isRead,
            Boolean isRollback,
            Boolean isVisibleOwner,
            Boolean isInteract,
            String isAgree,
            String scope,
            Long conversationId) {
        super(ImConversationMessages.IM_CONVERSATION_MESSAGES);

        setConversationMessageId(conversationMessageId);
        setCreatedAt(createdAt);
        setUpdatedAt(updatedAt);
        setMemberFromId(memberFromId);
        setMemberToId(memberToId);
        setMessageId(messageId);
        setIsRead(isRead);
        setIsRollback(isRollback);
        setIsVisibleOwner(isVisibleOwner);
        setIsInteract(isInteract);
        setIsAgree(isAgree);
        setScope(scope);
        setConversationId(conversationId);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised ImConversationMessagesRecord
     */
    public ImConversationMessagesRecord(
            org.carl.generated.tables.pojos.ImConversationMessages value) {
        super(ImConversationMessages.IM_CONVERSATION_MESSAGES);

        if (value != null) {
            setConversationMessageId(value.getConversationMessageId());
            setCreatedAt(value.getCreatedAt());
            setUpdatedAt(value.getUpdatedAt());
            setMemberFromId(value.getMemberFromId());
            setMemberToId(value.getMemberToId());
            setMessageId(value.getMessageId());
            setIsRead(value.getIsRead());
            setIsRollback(value.getIsRollback());
            setIsVisibleOwner(value.getIsVisibleOwner());
            setIsInteract(value.getIsInteract());
            setIsAgree(value.getIsAgree());
            setScope(value.getScope());
            setConversationId(value.getConversationId());
            resetChangedOnNotNull();
        }
    }
}
