/*
 * This file is generated by jOOQ.
 */
package org.carl.generated.tables;

import java.util.Collection;
import org.carl.generated.Keys;
import org.carl.generated.Public;
import org.carl.generated.tables.records.MemberBlacksRecord;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes", "this-escape"})
public class MemberBlacks extends TableImpl<MemberBlacksRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.member_blacks</code>
     */
    public static final MemberBlacks MEMBER_BLACKS = new MemberBlacks();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MemberBlacksRecord> getRecordType() {
        return MemberBlacksRecord.class;
    }

    /**
     * The column <code>public.member_blacks.id</code>.
     */
    public final TableField<MemberBlacksRecord, Long> ID =
            createField(
                    DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    private MemberBlacks(Name alias, Table<MemberBlacksRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private MemberBlacks(
            Name alias, Table<MemberBlacksRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.member_blacks</code> table reference
     */
    public MemberBlacks(String alias) {
        this(DSL.name(alias), MEMBER_BLACKS);
    }

    /**
     * Create an aliased <code>public.member_blacks</code> table reference
     */
    public MemberBlacks(Name alias) {
        this(alias, MEMBER_BLACKS);
    }

    /**
     * Create a <code>public.member_blacks</code> table reference
     */
    public MemberBlacks() {
        this(DSL.name("member_blacks"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<MemberBlacksRecord, Long> getIdentity() {
        return (Identity<MemberBlacksRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<MemberBlacksRecord> getPrimaryKey() {
        return Keys.MEMBER_BLACKS_PKEY;
    }

    @Override
    public MemberBlacks as(String alias) {
        return new MemberBlacks(DSL.name(alias), this);
    }

    @Override
    public MemberBlacks as(Name alias) {
        return new MemberBlacks(alias, this);
    }

    @Override
    public MemberBlacks as(Table<?> alias) {
        return new MemberBlacks(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public MemberBlacks rename(String name) {
        return new MemberBlacks(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MemberBlacks rename(Name name) {
        return new MemberBlacks(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public MemberBlacks rename(Table<?> name) {
        return new MemberBlacks(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public MemberBlacks where(Condition condition) {
        return new MemberBlacks(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public MemberBlacks where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public MemberBlacks where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public MemberBlacks where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public MemberBlacks where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public MemberBlacks where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public MemberBlacks where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public MemberBlacks where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public MemberBlacks whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public MemberBlacks whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
