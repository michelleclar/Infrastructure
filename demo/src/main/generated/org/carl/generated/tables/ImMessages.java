/*
 * This file is generated by jOOQ.
 */
package org.carl.generated.tables;

import java.time.OffsetDateTime;
import java.util.Collection;
import org.carl.generated.Keys;
import org.carl.generated.Public;
import org.carl.generated.tables.records.ImMessagesRecord;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.JSONB;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes", "this-escape"})
public class ImMessages extends TableImpl<ImMessagesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.im_messages</code>
     */
    public static final ImMessages IM_MESSAGES = new ImMessages();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ImMessagesRecord> getRecordType() {
        return ImMessagesRecord.class;
    }

    /**
     * The column <code>public.im_messages.message_id</code>.
     */
    public final TableField<ImMessagesRecord, Long> MESSAGE_ID =
            createField(
                    DSL.name("message_id"),
                    SQLDataType.BIGINT.nullable(false).identity(true),
                    this,
                    "");

    /**
     * The column <code>public.im_messages.created_at</code>.
     */
    public final TableField<ImMessagesRecord, OffsetDateTime> CREATED_AT =
            createField(
                    DSL.name("created_at"),
                    SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false),
                    this,
                    "");

    /**
     * The column <code>public.im_messages.updated_at</code>.
     */
    public final TableField<ImMessagesRecord, OffsetDateTime> UPDATED_AT =
            createField(
                    DSL.name("updated_at"),
                    SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false),
                    this,
                    "");

    /**
     * The column <code>public.im_messages.content</code>. 消息内容
     */
    public final TableField<ImMessagesRecord, JSONB> CONTENT =
            createField(DSL.name("content"), SQLDataType.JSONB.nullable(false), this, "消息内容");

    private ImMessages(Name alias, Table<ImMessagesRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private ImMessages(
            Name alias, Table<ImMessagesRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.im_messages</code> table reference
     */
    public ImMessages(String alias) {
        this(DSL.name(alias), IM_MESSAGES);
    }

    /**
     * Create an aliased <code>public.im_messages</code> table reference
     */
    public ImMessages(Name alias) {
        this(alias, IM_MESSAGES);
    }

    /**
     * Create a <code>public.im_messages</code> table reference
     */
    public ImMessages() {
        this(DSL.name("im_messages"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<ImMessagesRecord, Long> getIdentity() {
        return (Identity<ImMessagesRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<ImMessagesRecord> getPrimaryKey() {
        return Keys.IM_MESSAGES_PKEY;
    }

    @Override
    public ImMessages as(String alias) {
        return new ImMessages(DSL.name(alias), this);
    }

    @Override
    public ImMessages as(Name alias) {
        return new ImMessages(alias, this);
    }

    @Override
    public ImMessages as(Table<?> alias) {
        return new ImMessages(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ImMessages rename(String name) {
        return new ImMessages(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ImMessages rename(Name name) {
        return new ImMessages(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ImMessages rename(Table<?> name) {
        return new ImMessages(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ImMessages where(Condition condition) {
        return new ImMessages(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ImMessages where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ImMessages where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ImMessages where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ImMessages where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ImMessages where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ImMessages where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ImMessages where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ImMessages whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ImMessages whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
