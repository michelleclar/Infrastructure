/*
 * This file is generated by jOOQ.
 */
package org.carl.generated.tables;

import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import org.carl.generated.Indexes;
import org.carl.generated.Keys;
import org.carl.generated.Public;
import org.carl.generated.tables.records.ImConversationsRecord;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes", "this-escape"})
public class ImConversations extends TableImpl<ImConversationsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.im_conversations</code>
     */
    public static final ImConversations IM_CONVERSATIONS = new ImConversations();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ImConversationsRecord> getRecordType() {
        return ImConversationsRecord.class;
    }

    /**
     * The column <code>public.im_conversations.conversation_id</code>.
     */
    public final TableField<ImConversationsRecord, Long> CONVERSATION_ID =
            createField(
                    DSL.name("conversation_id"),
                    SQLDataType.BIGINT.nullable(false).identity(true),
                    this,
                    "");

    /**
     * The column <code>public.im_conversations.created_at</code>.
     */
    public final TableField<ImConversationsRecord, OffsetDateTime> CREATED_AT =
            createField(
                    DSL.name("created_at"),
                    SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false),
                    this,
                    "");

    /**
     * The column <code>public.im_conversations.updated_at</code>.
     */
    public final TableField<ImConversationsRecord, OffsetDateTime> UPDATED_AT =
            createField(
                    DSL.name("updated_at"),
                    SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false),
                    this,
                    "");

    /**
     * The column <code>public.im_conversations.member_from_id</code>. 会话发起者
     */
    public final TableField<ImConversationsRecord, Long> MEMBER_FROM_ID =
            createField(
                    DSL.name("member_from_id"), SQLDataType.BIGINT.nullable(false), this, "会话发起者");

    /**
     * The column <code>public.im_conversations.member_to_id</code>.
     */
    public final TableField<ImConversationsRecord, Long> MEMBER_TO_ID =
            createField(DSL.name("member_to_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.im_conversations.type</code>. 会话类型
     */
    public final TableField<ImConversationsRecord, String> TYPE =
            createField(DSL.name("type"), SQLDataType.VARCHAR.nullable(false), this, "会话类型");

    /**
     * The column <code>public.im_conversations.channel_id</code>.
     */
    public final TableField<ImConversationsRecord, Long> CHANNEL_ID =
            createField(DSL.name("channel_id"), SQLDataType.BIGINT.nullable(false), this, "");

    private ImConversations(Name alias, Table<ImConversationsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private ImConversations(
            Name alias,
            Table<ImConversationsRecord> aliased,
            Field<?>[] parameters,
            Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.im_conversations</code> table reference
     */
    public ImConversations(String alias) {
        this(DSL.name(alias), IM_CONVERSATIONS);
    }

    /**
     * Create an aliased <code>public.im_conversations</code> table reference
     */
    public ImConversations(Name alias) {
        this(alias, IM_CONVERSATIONS);
    }

    /**
     * Create a <code>public.im_conversations</code> table reference
     */
    public ImConversations() {
        this(DSL.name("im_conversations"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(
                Indexes.CONVERSATIONS_CHANNEL_ID,
                Indexes.CONVERSATIONS_MEMBER_FROM_ID_MEMBER_TO_ID);
    }

    @Override
    public Identity<ImConversationsRecord, Long> getIdentity() {
        return (Identity<ImConversationsRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<ImConversationsRecord> getPrimaryKey() {
        return Keys.IM_CONVERSATIONS_PKEY;
    }

    @Override
    public ImConversations as(String alias) {
        return new ImConversations(DSL.name(alias), this);
    }

    @Override
    public ImConversations as(Name alias) {
        return new ImConversations(alias, this);
    }

    @Override
    public ImConversations as(Table<?> alias) {
        return new ImConversations(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ImConversations rename(String name) {
        return new ImConversations(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ImConversations rename(Name name) {
        return new ImConversations(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ImConversations rename(Table<?> name) {
        return new ImConversations(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ImConversations where(Condition condition) {
        return new ImConversations(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ImConversations where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ImConversations where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ImConversations where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ImConversations where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ImConversations where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ImConversations where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ImConversations where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ImConversations whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ImConversations whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
