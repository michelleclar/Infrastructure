/*
 * This file is generated by jOOQ.
 */
package org.carl.generated.tables;

import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import org.carl.generated.Indexes;
import org.carl.generated.Keys;
import org.carl.generated.Public;
import org.carl.generated.tables.records.ImConversationMessagesRecord;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes", "this-escape"})
public class ImConversationMessages extends TableImpl<ImConversationMessagesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.im_conversation_messages</code>
     */
    public static final ImConversationMessages IM_CONVERSATION_MESSAGES =
            new ImConversationMessages();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ImConversationMessagesRecord> getRecordType() {
        return ImConversationMessagesRecord.class;
    }

    /**
     * The column
     * <code>public.im_conversation_messages.conversation_message_id</code>.
     */
    public final TableField<ImConversationMessagesRecord, Long> CONVERSATION_MESSAGE_ID =
            createField(
                    DSL.name("conversation_message_id"),
                    SQLDataType.BIGINT.nullable(false).identity(true),
                    this,
                    "");

    /**
     * The column <code>public.im_conversation_messages.created_at</code>.
     */
    public final TableField<ImConversationMessagesRecord, OffsetDateTime> CREATED_AT =
            createField(
                    DSL.name("created_at"),
                    SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false),
                    this,
                    "");

    /**
     * The column <code>public.im_conversation_messages.updated_at</code>.
     */
    public final TableField<ImConversationMessagesRecord, OffsetDateTime> UPDATED_AT =
            createField(
                    DSL.name("updated_at"),
                    SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false),
                    this,
                    "");

    /**
     * The column <code>public.im_conversation_messages.member_from_id</code>.
     * 会话消息发送者
     */
    public final TableField<ImConversationMessagesRecord, Long> MEMBER_FROM_ID =
            createField(
                    DSL.name("member_from_id"),
                    SQLDataType.BIGINT.nullable(false),
                    this,
                    "会话消息发送者");

    /**
     * The column <code>public.im_conversation_messages.member_to_id</code>.
     * 会话消息接受者
     */
    public final TableField<ImConversationMessagesRecord, Long> MEMBER_TO_ID =
            createField(
                    DSL.name("member_to_id"), SQLDataType.BIGINT.nullable(false), this, "会话消息接受者");

    /**
     * The column <code>public.im_conversation_messages.message_id</code>.
     */
    public final TableField<ImConversationMessagesRecord, Long> MESSAGE_ID =
            createField(DSL.name("message_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.im_conversation_messages.is_read</code>. 是否已读
     */
    public final TableField<ImConversationMessagesRecord, Boolean> IS_READ =
            createField(
                    DSL.name("is_read"),
                    SQLDataType.BOOLEAN
                            .nullable(false)
                            .defaultValue(DSL.field(DSL.raw("false"), SQLDataType.BOOLEAN)),
                    this,
                    "是否已读");

    /**
     * The column <code>public.im_conversation_messages.is_rollback</code>. 是否回滚
     */
    public final TableField<ImConversationMessagesRecord, Boolean> IS_ROLLBACK =
            createField(
                    DSL.name("is_rollback"),
                    SQLDataType.BOOLEAN
                            .nullable(false)
                            .defaultValue(DSL.field(DSL.raw("false"), SQLDataType.BOOLEAN)),
                    this,
                    "是否回滚");

    /**
     * The column <code>public.im_conversation_messages.is_visible_owner</code>.
     * 是否对自己可见
     */
    public final TableField<ImConversationMessagesRecord, Boolean> IS_VISIBLE_OWNER =
            createField(
                    DSL.name("is_visible_owner"),
                    SQLDataType.BOOLEAN
                            .nullable(false)
                            .defaultValue(DSL.field(DSL.raw("true"), SQLDataType.BOOLEAN)),
                    this,
                    "是否对自己可见");

    /**
     * The column <code>public.im_conversation_messages.is_interact</code>.
     * 是否是互动消息
     */
    public final TableField<ImConversationMessagesRecord, Boolean> IS_INTERACT =
            createField(
                    DSL.name("is_interact"),
                    SQLDataType.BOOLEAN
                            .nullable(false)
                            .defaultValue(DSL.field(DSL.raw("false"), SQLDataType.BOOLEAN)),
                    this,
                    "是否是互动消息");

    /**
     * The column <code>public.im_conversation_messages.is_agree</code>.
     * 当前互动消息状态
     */
    public final TableField<ImConversationMessagesRecord, String> IS_AGREE =
            createField(
                    DSL.name("is_agree"),
                    SQLDataType.VARCHAR
                            .nullable(false)
                            .defaultValue(
                                    DSL.field(
                                            DSL.raw("'think'::character varying"),
                                            SQLDataType.VARCHAR)),
                    this,
                    "当前互动消息状态");

    /**
     * The column <code>public.im_conversation_messages.scope</code>. 获取域
     */
    public final TableField<ImConversationMessagesRecord, String> SCOPE =
            createField(DSL.name("scope"), SQLDataType.VARCHAR, this, "获取域");

    /**
     * The column <code>public.im_conversation_messages.conversation_id</code>.
     */
    public final TableField<ImConversationMessagesRecord, Long> CONVERSATION_ID =
            createField(DSL.name("conversation_id"), SQLDataType.BIGINT.nullable(false), this, "");

    private ImConversationMessages(Name alias, Table<ImConversationMessagesRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private ImConversationMessages(
            Name alias,
            Table<ImConversationMessagesRecord> aliased,
            Field<?>[] parameters,
            Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.im_conversation_messages</code> table
     * reference
     */
    public ImConversationMessages(String alias) {
        this(DSL.name(alias), IM_CONVERSATION_MESSAGES);
    }

    /**
     * Create an aliased <code>public.im_conversation_messages</code> table
     * reference
     */
    public ImConversationMessages(Name alias) {
        this(alias, IM_CONVERSATION_MESSAGES);
    }

    /**
     * Create a <code>public.im_conversation_messages</code> table reference
     */
    public ImConversationMessages() {
        this(DSL.name("im_conversation_messages"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.CONVERSATIONMESSAGES_CONVERSATION_ID);
    }

    @Override
    public Identity<ImConversationMessagesRecord, Long> getIdentity() {
        return (Identity<ImConversationMessagesRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<ImConversationMessagesRecord> getPrimaryKey() {
        return Keys.IM_CONVERSATION_MESSAGES_PKEY;
    }

    @Override
    public ImConversationMessages as(String alias) {
        return new ImConversationMessages(DSL.name(alias), this);
    }

    @Override
    public ImConversationMessages as(Name alias) {
        return new ImConversationMessages(alias, this);
    }

    @Override
    public ImConversationMessages as(Table<?> alias) {
        return new ImConversationMessages(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ImConversationMessages rename(String name) {
        return new ImConversationMessages(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ImConversationMessages rename(Name name) {
        return new ImConversationMessages(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ImConversationMessages rename(Table<?> name) {
        return new ImConversationMessages(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ImConversationMessages where(Condition condition) {
        return new ImConversationMessages(
                getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ImConversationMessages where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ImConversationMessages where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ImConversationMessages where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ImConversationMessages where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ImConversationMessages where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ImConversationMessages where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ImConversationMessages where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ImConversationMessages whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ImConversationMessages whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
