/*
 * This file is generated by jOOQ.
 */
package org.carl.generated.tables;

import java.util.Collection;
import org.carl.generated.Keys;
import org.carl.generated.Public;
import org.carl.generated.tables.records.MemberFriendsRecord;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes", "this-escape"})
public class MemberFriends extends TableImpl<MemberFriendsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.member_friends</code>
     */
    public static final MemberFriends MEMBER_FRIENDS = new MemberFriends();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MemberFriendsRecord> getRecordType() {
        return MemberFriendsRecord.class;
    }

    /**
     * The column <code>public.member_friends.id</code>.
     */
    public final TableField<MemberFriendsRecord, Long> ID =
            createField(
                    DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    private MemberFriends(Name alias, Table<MemberFriendsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private MemberFriends(
            Name alias,
            Table<MemberFriendsRecord> aliased,
            Field<?>[] parameters,
            Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.member_friends</code> table reference
     */
    public MemberFriends(String alias) {
        this(DSL.name(alias), MEMBER_FRIENDS);
    }

    /**
     * Create an aliased <code>public.member_friends</code> table reference
     */
    public MemberFriends(Name alias) {
        this(alias, MEMBER_FRIENDS);
    }

    /**
     * Create a <code>public.member_friends</code> table reference
     */
    public MemberFriends() {
        this(DSL.name("member_friends"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<MemberFriendsRecord, Long> getIdentity() {
        return (Identity<MemberFriendsRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<MemberFriendsRecord> getPrimaryKey() {
        return Keys.MEMBER_FRIENDS_PKEY;
    }

    @Override
    public MemberFriends as(String alias) {
        return new MemberFriends(DSL.name(alias), this);
    }

    @Override
    public MemberFriends as(Name alias) {
        return new MemberFriends(alias, this);
    }

    @Override
    public MemberFriends as(Table<?> alias) {
        return new MemberFriends(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public MemberFriends rename(String name) {
        return new MemberFriends(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MemberFriends rename(Name name) {
        return new MemberFriends(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public MemberFriends rename(Table<?> name) {
        return new MemberFriends(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public MemberFriends where(Condition condition) {
        return new MemberFriends(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public MemberFriends where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public MemberFriends where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public MemberFriends where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public MemberFriends where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public MemberFriends where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public MemberFriends where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public MemberFriends where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public MemberFriends whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public MemberFriends whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
