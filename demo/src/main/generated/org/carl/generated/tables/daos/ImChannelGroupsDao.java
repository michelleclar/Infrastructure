/*
 * This file is generated by jOOQ.
 */
package org.carl.generated.tables.daos;

import java.time.OffsetDateTime;
import java.util.List;
import java.util.Optional;
import org.carl.generated.tables.ImChannelGroups;
import org.carl.generated.tables.records.ImChannelGroupsRecord;
import org.jooq.Configuration;
import org.jooq.JSONB;
import org.jooq.impl.DAOImpl;

/**
 * 频道展示
 */
@SuppressWarnings({"all", "unchecked", "rawtypes", "this-escape"})
public class ImChannelGroupsDao
        extends DAOImpl<
                ImChannelGroupsRecord, org.carl.generated.tables.pojos.ImChannelGroups, Long> {

    /**
     * Create a new ImChannelGroupsDao without any configuration
     */
    public ImChannelGroupsDao() {
        super(
                ImChannelGroups.IM_CHANNEL_GROUPS,
                org.carl.generated.tables.pojos.ImChannelGroups.class);
    }

    /**
     * Create a new ImChannelGroupsDao with an attached configuration
     */
    public ImChannelGroupsDao(Configuration configuration) {
        super(
                ImChannelGroups.IM_CHANNEL_GROUPS,
                org.carl.generated.tables.pojos.ImChannelGroups.class,
                configuration);
    }

    @Override
    public Long getId(org.carl.generated.tables.pojos.ImChannelGroups object) {
        return object.getConversationGroupId();
    }

    /**
     * Fetch records that have <code>conversation_group_id BETWEEN
     * lowerInclusive AND upperInclusive</code>
     */
    public List<org.carl.generated.tables.pojos.ImChannelGroups> fetchRangeOfConversationGroupId(
            Long lowerInclusive, Long upperInclusive) {
        return fetchRange(
                ImChannelGroups.IM_CHANNEL_GROUPS.CONVERSATION_GROUP_ID,
                lowerInclusive,
                upperInclusive);
    }

    /**
     * Fetch records that have <code>conversation_group_id IN (values)</code>
     */
    public List<org.carl.generated.tables.pojos.ImChannelGroups> fetchByConversationGroupId(
            Long... values) {
        return fetch(ImChannelGroups.IM_CHANNEL_GROUPS.CONVERSATION_GROUP_ID, values);
    }

    /**
     * Fetch a unique record that has <code>conversation_group_id = value</code>
     */
    public org.carl.generated.tables.pojos.ImChannelGroups fetchOneByConversationGroupId(
            Long value) {
        return fetchOne(ImChannelGroups.IM_CHANNEL_GROUPS.CONVERSATION_GROUP_ID, value);
    }

    /**
     * Fetch a unique record that has <code>conversation_group_id = value</code>
     */
    public Optional<org.carl.generated.tables.pojos.ImChannelGroups>
            fetchOptionalByConversationGroupId(Long value) {
        return fetchOptional(ImChannelGroups.IM_CHANNEL_GROUPS.CONVERSATION_GROUP_ID, value);
    }

    /**
     * Fetch records that have <code>created_at BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<org.carl.generated.tables.pojos.ImChannelGroups> fetchRangeOfCreatedAt(
            OffsetDateTime lowerInclusive, OffsetDateTime upperInclusive) {
        return fetchRange(
                ImChannelGroups.IM_CHANNEL_GROUPS.CREATED_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>created_at IN (values)</code>
     */
    public List<org.carl.generated.tables.pojos.ImChannelGroups> fetchByCreatedAt(
            OffsetDateTime... values) {
        return fetch(ImChannelGroups.IM_CHANNEL_GROUPS.CREATED_AT, values);
    }

    /**
     * Fetch records that have <code>updated_at BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<org.carl.generated.tables.pojos.ImChannelGroups> fetchRangeOfUpdatedAt(
            OffsetDateTime lowerInclusive, OffsetDateTime upperInclusive) {
        return fetchRange(
                ImChannelGroups.IM_CHANNEL_GROUPS.UPDATED_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>updated_at IN (values)</code>
     */
    public List<org.carl.generated.tables.pojos.ImChannelGroups> fetchByUpdatedAt(
            OffsetDateTime... values) {
        return fetch(ImChannelGroups.IM_CHANNEL_GROUPS.UPDATED_AT, values);
    }

    /**
     * Fetch records that have <code>member_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<org.carl.generated.tables.pojos.ImChannelGroups> fetchRangeOfMemberId(
            Long lowerInclusive, Long upperInclusive) {
        return fetchRange(
                ImChannelGroups.IM_CHANNEL_GROUPS.MEMBER_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>member_id IN (values)</code>
     */
    public List<org.carl.generated.tables.pojos.ImChannelGroups> fetchByMemberId(Long... values) {
        return fetch(ImChannelGroups.IM_CHANNEL_GROUPS.MEMBER_ID, values);
    }

    /**
     * Fetch records that have <code>group_title BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<org.carl.generated.tables.pojos.ImChannelGroups> fetchRangeOfGroupTitle(
            String lowerInclusive, String upperInclusive) {
        return fetchRange(
                ImChannelGroups.IM_CHANNEL_GROUPS.GROUP_TITLE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>group_title IN (values)</code>
     */
    public List<org.carl.generated.tables.pojos.ImChannelGroups> fetchByGroupTitle(
            String... values) {
        return fetch(ImChannelGroups.IM_CHANNEL_GROUPS.GROUP_TITLE, values);
    }

    /**
     * Fetch records that have <code>channel_ids BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<org.carl.generated.tables.pojos.ImChannelGroups> fetchRangeOfChannelIds(
            JSONB lowerInclusive, JSONB upperInclusive) {
        return fetchRange(
                ImChannelGroups.IM_CHANNEL_GROUPS.CHANNEL_IDS, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>channel_ids IN (values)</code>
     */
    public List<org.carl.generated.tables.pojos.ImChannelGroups> fetchByChannelIds(
            JSONB... values) {
        return fetch(ImChannelGroups.IM_CHANNEL_GROUPS.CHANNEL_IDS, values);
    }
}
