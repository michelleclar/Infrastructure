/*
 * This file is generated by jOOQ.
 */
package org.carl.generated.tables;

import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import org.carl.generated.Indexes;
import org.carl.generated.Keys;
import org.carl.generated.Public;
import org.carl.generated.tables.records.ImChannelBoxRecord;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes", "this-escape"})
public class ImChannelBox extends TableImpl<ImChannelBoxRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.im_channel_box</code>
     */
    public static final ImChannelBox IM_CHANNEL_BOX = new ImChannelBox();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ImChannelBoxRecord> getRecordType() {
        return ImChannelBoxRecord.class;
    }

    /**
     * The column <code>public.im_channel_box.channel_box_id</code>.
     */
    public final TableField<ImChannelBoxRecord, Long> CHANNEL_BOX_ID =
            createField(
                    DSL.name("channel_box_id"),
                    SQLDataType.BIGINT.nullable(false).identity(true),
                    this,
                    "");

    /**
     * The column <code>public.im_channel_box.created_at</code>.
     */
    public final TableField<ImChannelBoxRecord, OffsetDateTime> CREATED_AT =
            createField(
                    DSL.name("created_at"),
                    SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false),
                    this,
                    "");

    /**
     * The column <code>public.im_channel_box.updated_at</code>.
     */
    public final TableField<ImChannelBoxRecord, OffsetDateTime> UPDATED_AT =
            createField(
                    DSL.name("updated_at"),
                    SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false),
                    this,
                    "");

    /**
     * The column <code>public.im_channel_box.member_id</code>. 用户id
     */
    public final TableField<ImChannelBoxRecord, Long> MEMBER_ID =
            createField(DSL.name("member_id"), SQLDataType.BIGINT.nullable(false), this, "用户id");

    /**
     * The column <code>public.im_channel_box.is_top</code>. 是否置顶
     */
    public final TableField<ImChannelBoxRecord, Boolean> IS_TOP =
            createField(
                    DSL.name("is_top"),
                    SQLDataType.BOOLEAN
                            .nullable(false)
                            .defaultValue(DSL.field(DSL.raw("false"), SQLDataType.BOOLEAN)),
                    this,
                    "是否置顶");

    /**
     * The column <code>public.im_channel_box.is_delete</code>. 是否删除
     */
    public final TableField<ImChannelBoxRecord, Boolean> IS_DELETE =
            createField(
                    DSL.name("is_delete"),
                    SQLDataType.BOOLEAN
                            .nullable(false)
                            .defaultValue(DSL.field(DSL.raw("false"), SQLDataType.BOOLEAN)),
                    this,
                    "是否删除");

    /**
     * The column <code>public.im_channel_box.is_subscribe</code>. 是否订阅消息通知
     */
    public final TableField<ImChannelBoxRecord, Boolean> IS_SUBSCRIBE =
            createField(
                    DSL.name("is_subscribe"),
                    SQLDataType.BOOLEAN
                            .nullable(false)
                            .defaultValue(DSL.field(DSL.raw("true"), SQLDataType.BOOLEAN)),
                    this,
                    "是否订阅消息通知");

    /**
     * The column <code>public.im_channel_box.channel_id</code>. 频道id
     */
    public final TableField<ImChannelBoxRecord, Long> CHANNEL_ID =
            createField(DSL.name("channel_id"), SQLDataType.BIGINT.nullable(false), this, "频道id");

    private ImChannelBox(Name alias, Table<ImChannelBoxRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private ImChannelBox(
            Name alias, Table<ImChannelBoxRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.im_channel_box</code> table reference
     */
    public ImChannelBox(String alias) {
        this(DSL.name(alias), IM_CHANNEL_BOX);
    }

    /**
     * Create an aliased <code>public.im_channel_box</code> table reference
     */
    public ImChannelBox(Name alias) {
        this(alias, IM_CHANNEL_BOX);
    }

    /**
     * Create a <code>public.im_channel_box</code> table reference
     */
    public ImChannelBox() {
        this(DSL.name("im_channel_box"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.CHANNELBOX_MEMBER_ID);
    }

    @Override
    public Identity<ImChannelBoxRecord, Long> getIdentity() {
        return (Identity<ImChannelBoxRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<ImChannelBoxRecord> getPrimaryKey() {
        return Keys.IM_CHANNEL_BOX_PKEY;
    }

    @Override
    public ImChannelBox as(String alias) {
        return new ImChannelBox(DSL.name(alias), this);
    }

    @Override
    public ImChannelBox as(Name alias) {
        return new ImChannelBox(alias, this);
    }

    @Override
    public ImChannelBox as(Table<?> alias) {
        return new ImChannelBox(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ImChannelBox rename(String name) {
        return new ImChannelBox(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ImChannelBox rename(Name name) {
        return new ImChannelBox(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ImChannelBox rename(Table<?> name) {
        return new ImChannelBox(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ImChannelBox where(Condition condition) {
        return new ImChannelBox(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ImChannelBox where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ImChannelBox where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ImChannelBox where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ImChannelBox where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ImChannelBox where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ImChannelBox where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ImChannelBox where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ImChannelBox whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ImChannelBox whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
