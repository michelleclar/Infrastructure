package org.carl.infrastructure.testcontainers;

import io.quarkus.test.common.QuarkusTestResourceLifecycleManager;
import java.util.Map;
import org.eclipse.microprofile.config.ConfigProvider;
import org.testcontainers.milvus.MilvusContainer;
import org.testcontainers.shaded.com.google.common.collect.ImmutableMap;

public class MilvusTestResource implements QuarkusTestResourceLifecycleManager {

    private static final String TAG = "milvusdb/milvus:v2.3.9";

    public static MilvusContainer CONTAINER;

    static {
        Integer port =
                ConfigProvider.getConfig().getValue("camel.component.milvus.port", int.class);
        CONTAINER = new MilvusContainer(TAG).withExposedPorts(port).withReuse(true);
    }

    @Override
    public Map<String, String> start() {
        if (!CONTAINER.isRunning()) {
            CONTAINER.start();
        }
        CONTAINER.getExposedPorts();

        //        Network network = Network.newNetwork();
        //        GenericContainer<?> etcd = new GenericContainer<>("quay.io/coreos/etcd:v3.5.5")
        //                .withNetwork(network)
        //                .withNetworkAliases("etcd")
        //                .withCommand(
        //                        "etcd",
        //                        "-advertise-client-urls=http://127.0.0.1:2379",
        //                        "-listen-client-urls=http://0.0.0.0:2379",
        //                        "--data-dir=/etcd"
        //                )
        //                .withEnv("ETCD_AUTO_COMPACTION_MODE", "revision")
        //                .withEnv("ETCD_AUTO_COMPACTION_RETENTION", "1000")
        //                .withEnv("ETCD_QUOTA_BACKEND_BYTES", "4294967296")
        //                .withEnv("ETCD_SNAPSHOT_COUNT", "50000")

        return ImmutableMap.of();
    }

    @Override
    public void stop() {}
}
