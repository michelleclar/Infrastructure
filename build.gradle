plugins {
    id 'java'
    id "com.diffplug.spotless"
}
subprojects {
    apply {
        plugin('com.diffplug.spotless')
        plugin('java')
    }
    group = 'org.carl'
    version = '1.0-BATE'
    repositories {
        maven { url 'https://maven.aliyun.com/repository/central' }
    }
    java {
        toolchain {
            languageVersion = JavaLanguageVersion.of(21)
        }
        sourceCompatibility = JavaVersion.VERSION_21
        targetCompatibility = JavaVersion.VERSION_21
    }


    compileJava {
        options.encoding = 'UTF-8'
        options.compilerArgs << '-parameters'
    }

    compileTestJava {
        options.encoding = 'UTF-8'
    }
    javadoc.options.encoding = 'UTF-8'
    test {
        useJUnitPlatform()
        systemProperty "java.util.logging.manager", "org.jboss.logmanager.LogManager"
    }
    spotless {
        ratchetFrom 'origin/main'

        java {
            target fileTree('.') {
                include '**/*.java'
                exclude '**/build/**', '**/build-*/**'
            }
            importOrder()
            cleanthat()
            googleJavaFormat().aosp().reflowLongStrings().formatJavadoc(false).reorderImports(false).groupArtifact("com.google.googlejavaformat:google-java-format")
            formatAnnotations()
            trimTrailingWhitespace()
            endWithNewline()
        }
        groovyGradle {
            target fileTree('.') {
                include '**/*.gradle'
                exclude '**/build/**', '**/build-*/**'
            }
            greclipse()
            indentWithSpaces(4)
            trimTrailingWhitespace()
            endWithNewline()
        }
        format 'xml', {
            target fileTree('.') {
                include '**/*.xml'
                exclude '**/build/**', '**/build-*/**'
            }
            eclipseWtp('xml')
            trimTrailingWhitespace()
            indentWithSpaces(2)
            endWithNewline()
        }
        format 'misc', {
            target fileTree('.') {
                include '**/*.md', '**/.gitignore'
                exclude '**/build/**', '**/build-*/**'
            }
            trimTrailingWhitespace()
            indentWithSpaces(2)
            endWithNewline()
        }
    }
    afterEvaluate {
        def spotless = tasks.named('spotlessApply')
        if (spotless) {
            tasks.withType(JavaCompile).configureEach {
                finalizedBy(spotless)
            }

            tasks.withType(GroovyCompile).tap {
                configureEach {
                    finalizedBy(spotless)
                }
            }
        }
    }
    configurations.configureEach {
        resolutionStrategy.dependencySubstitution {
            substitute(module("org.apache.bookkeeper:circe-checksum"))
                    .using(module("org.apache.bookkeeper:circe-checksum:4.17.0"))
                    .withoutClassifier()
            substitute(module("org.apache.bookkeeper:cpu-affinity"))
                    .using(module("org.apache.bookkeeper:cpu-affinity:4.17.0"))
                    .withoutClassifier()
        }
    }
    if (!name.startsWith('infrastructure')) {
        dependencies {
            implementation project(':infrastructure')
        }
    }
}