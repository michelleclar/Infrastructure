plugins {
    id 'java'
    id "com.diffplug.spotless"
    alias(libs.plugins.quarkus)
    id 'nu.studer.jooq'
    id 'java-library'
}
subprojects {
    apply {
        plugin('com.diffplug.spotless')
        plugin('java')
        plugin('idea')
        plugin 'io.quarkus'
        plugin 'java-library'
        plugin 'nu.studer.jooq'
    }
    group = 'org.carl'
    version = '1.0-BATE'
    repositories {
        maven { url 'https://maven.aliyun.com/repository/central' }
        maven { url 'https://mirrors.cloud.tencent.com/repository/maven' }
        mavenCentral()
    }
    java {
        toolchain {
            languageVersion = JavaLanguageVersion.of(21)
        }
        sourceCompatibility = JavaVersion.VERSION_21
        targetCompatibility = JavaVersion.VERSION_21
    }


    tasks.withType(JavaCompile).configureEach {
        options.encoding = 'UTF-8'
        options.compilerArgs << '-parameters'
    }
    tasks.withType(Javadoc).configureEach {
        enabled = false
    }
    tasks.named("javadoc") {
        mustRunAfter { tasks.named("jandex") }
    }
    tasks.withType(GenerateModuleMetadata).configureEach {
        suppressedValidationErrors.add("enforced-platform")
    }

    compileTestJava {
        options.encoding = 'UTF-8'
    }
    javadoc.options.encoding = 'UTF-8'
    test {
        useJUnitPlatform()
        systemProperty "java.util.logging.manager", "org.jboss.logmanager.LogManager"
        systemProperty "TESTCONTAINERS_REUSE_ENABLE", "true"
    }
    // NOTE: https://github.com/diffplug/spotless/tree/main/plugin-gradle
    spotless {
        ratchetFrom 'origin/main'

        java {
            importOrder()
            cleanthat()
            googleJavaFormat().aosp().reflowLongStrings().formatJavadoc(false).reorderImports(false).groupArtifact("com.google.googlejavaformat:google-java-format")
            formatAnnotations()
            trimTrailingWhitespace()
            endWithNewline()
        }
        protobuf {
            target '**/*.proto'
            buf()
            licenseHeader '/* (C) $YEAR */'
        }
        flexmark {
            target '**/*.md'
            flexmark()
        }
        sql {
            target fileTree('.') {
                include 'src/main/resources/**/*.sql'
                exclude '**/build/**', '**/build-*/**'
            }
            dbeaver()
            prettier()
        }
        yaml {
            target fileTree('.') {
                include 'src/main/resources/**/*.yaml'
                exclude '**/build/**', '**/build-*/**'
            }
            jackson()
            prettier()
        }
        shell {
            target fileTree('.') {
                include 'src/main/resources/**/*.sh'
                exclude '**/build/**', '**/build-*/**'
            }
            shfmt()
        }
        groovyGradle {
            target fileTree('.') {
                include '**/*.gradle'
                exclude '**/build/**', '**/build-*/**'
            }
            greclipse()
            indentWithSpaces(4)
            trimTrailingWhitespace()
            endWithNewline()
        }
        format 'xml', {
            target fileTree('.') {
                include '**/*.xml'
                exclude '**/build/**', '**/build-*/**'
            }
            eclipseWtp('xml')
            trimTrailingWhitespace()
            indentWithSpaces(2)
            endWithNewline()
        }
        format 'misc', {
            target fileTree('.') {
                include '**/*.md', '**/.gitignore'
                exclude '**/build/**', '**/build-*/**'
            }
            trimTrailingWhitespace()
            indentWithSpaces(2)
            endWithNewline()
        }
    }
    afterEvaluate {
        def spotless = tasks.named('spotlessApply')
        if (spotless) {
            tasks.withType(JavaCompile).configureEach {
                finalizedBy(spotless)
            }

            tasks.withType(GroovyCompile).tap {
                configureEach {
                    finalizedBy(spotless)
                }
            }
        }
    }
    // NOTE: pulsar
    configurations.configureEach {
        resolutionStrategy.dependencySubstitution {
            substitute(module("org.apache.bookkeeper:circe-checksum"))
                    .using(module("org.apache.bookkeeper:circe-checksum:4.17.0"))
                    .withoutClassifier()
            substitute(module("org.apache.bookkeeper:cpu-affinity"))
                    .using(module("org.apache.bookkeeper:cpu-affinity:4.17.0"))
                    .withoutClassifier()
        }
    }

    dependencies {
        implementation enforcedPlatform(libs.quarkus.platform.bom)
        testImplementation libs.bundles.test
    }
    if (!project.toString().contains('infrastructure')) {
        dependencies {
//            implementation project(':infrastructure-components:infrastructure-component-boot')
            implementation project(':infrastructure-components:infrastructure-component-authorization')
            implementation project(':infrastructure-components:infrastructure-component-broadcast')
            implementation project(':infrastructure-components:infrastructure-component-cache')
            implementation project(':infrastructure-components:infrastructure-component-persistence')
            implementation project(':infrastructure-components:infrastructure-component-search')
//            implementation project(':infrastructure-components:infrastructure-component-tool')
            implementation project(':infrastructure-components:infrastructure-component-web')
        }
        def mainSrc = 'src/main/java'
        def generatedDir = 'src/main/generated'
        sourceSets {
            main {
                java {
                    srcDir generatedDir
                    srcDir mainSrc
                }
            }
        }

        idea {
            module {
                generatedSourceDirs.addAll(file(generatedDir))
                sourceDirs.addAll(file(generatedDir))
                sourceDirs.addAll(file(mainSrc))
            }
        }
        var api = System.getenv("API_PREFIX") == null ? "/v1/api" : System.getenv("API_PREFIX")
        quarkus {
            quarkusBuildProperties.put("quarkus.grpc.codegen.proto-directory", "./protos")
//            quarkusBuildProperties.put("quarkus.http.root-path", api)
        }
        quarkusBuild {
            nativeArgs {
                containerBuild = true
                builderImage = "quay.io/quarkus/ubi-quarkus-mandrel-builder-image:jdk-21"
            }
        }
    }
}