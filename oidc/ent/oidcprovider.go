// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"oidc/ent/oidcprovider"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// OidcProvider is the model entity for the OidcProvider schema.
type OidcProvider struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// OidcProvider ID
	OidcProviderID int64 `json:"oidc_provider_id,omitempty"`
	// OidcProvider Name
	OidcProviderName string `json:"oidc_provider_name,omitempty"`
	// OidcProvider Description
	OidcProviderDescription string `json:"oidc_provider_description,omitempty"`
	// issuer
	Issuer string `json:"issuer,omitempty"`
	// proxy URL
	ProxyURL string `json:"proxy_url,omitempty"`
	// Client ID
	ClientID string `json:"client_id,omitempty"`
	// Client Secret
	ClientSecret string `json:"client_secret,omitempty"`
	// Redirect URI
	RedirectURI string `json:"redirect_uri,omitempty"`
	// OidcProvider Endpoints
	Endpoints    []string `json:"endpoints,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*OidcProvider) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case oidcprovider.FieldEndpoints:
			values[i] = new([]byte)
		case oidcprovider.FieldID, oidcprovider.FieldOidcProviderID:
			values[i] = new(sql.NullInt64)
		case oidcprovider.FieldOidcProviderName, oidcprovider.FieldOidcProviderDescription, oidcprovider.FieldIssuer, oidcprovider.FieldProxyURL, oidcprovider.FieldClientID, oidcprovider.FieldClientSecret, oidcprovider.FieldRedirectURI:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the OidcProvider fields.
func (op *OidcProvider) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case oidcprovider.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			op.ID = int(value.Int64)
		case oidcprovider.FieldOidcProviderID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field oidc_provider_id", values[i])
			} else if value.Valid {
				op.OidcProviderID = value.Int64
			}
		case oidcprovider.FieldOidcProviderName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field oidc_provider_name", values[i])
			} else if value.Valid {
				op.OidcProviderName = value.String
			}
		case oidcprovider.FieldOidcProviderDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field oidc_provider_description", values[i])
			} else if value.Valid {
				op.OidcProviderDescription = value.String
			}
		case oidcprovider.FieldIssuer:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field issuer", values[i])
			} else if value.Valid {
				op.Issuer = value.String
			}
		case oidcprovider.FieldProxyURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field proxy_url", values[i])
			} else if value.Valid {
				op.ProxyURL = value.String
			}
		case oidcprovider.FieldClientID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field client_id", values[i])
			} else if value.Valid {
				op.ClientID = value.String
			}
		case oidcprovider.FieldClientSecret:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field client_secret", values[i])
			} else if value.Valid {
				op.ClientSecret = value.String
			}
		case oidcprovider.FieldRedirectURI:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field redirect_uri", values[i])
			} else if value.Valid {
				op.RedirectURI = value.String
			}
		case oidcprovider.FieldEndpoints:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field endpoints", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &op.Endpoints); err != nil {
					return fmt.Errorf("unmarshal field endpoints: %w", err)
				}
			}
		default:
			op.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the OidcProvider.
// This includes values selected through modifiers, order, etc.
func (op *OidcProvider) Value(name string) (ent.Value, error) {
	return op.selectValues.Get(name)
}

// Update returns a builder for updating this OidcProvider.
// Note that you need to call OidcProvider.Unwrap() before calling this method if this OidcProvider
// was returned from a transaction, and the transaction was committed or rolled back.
func (op *OidcProvider) Update() *OidcProviderUpdateOne {
	return NewOidcProviderClient(op.config).UpdateOne(op)
}

// Unwrap unwraps the OidcProvider entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (op *OidcProvider) Unwrap() *OidcProvider {
	_tx, ok := op.config.driver.(*txDriver)
	if !ok {
		panic("ent: OidcProvider is not a transactional entity")
	}
	op.config.driver = _tx.drv
	return op
}

// String implements the fmt.Stringer.
func (op *OidcProvider) String() string {
	var builder strings.Builder
	builder.WriteString("OidcProvider(")
	builder.WriteString(fmt.Sprintf("id=%v, ", op.ID))
	builder.WriteString("oidc_provider_id=")
	builder.WriteString(fmt.Sprintf("%v", op.OidcProviderID))
	builder.WriteString(", ")
	builder.WriteString("oidc_provider_name=")
	builder.WriteString(op.OidcProviderName)
	builder.WriteString(", ")
	builder.WriteString("oidc_provider_description=")
	builder.WriteString(op.OidcProviderDescription)
	builder.WriteString(", ")
	builder.WriteString("issuer=")
	builder.WriteString(op.Issuer)
	builder.WriteString(", ")
	builder.WriteString("proxy_url=")
	builder.WriteString(op.ProxyURL)
	builder.WriteString(", ")
	builder.WriteString("client_id=")
	builder.WriteString(op.ClientID)
	builder.WriteString(", ")
	builder.WriteString("client_secret=")
	builder.WriteString(op.ClientSecret)
	builder.WriteString(", ")
	builder.WriteString("redirect_uri=")
	builder.WriteString(op.RedirectURI)
	builder.WriteString(", ")
	builder.WriteString("endpoints=")
	builder.WriteString(fmt.Sprintf("%v", op.Endpoints))
	builder.WriteByte(')')
	return builder.String()
}

// OidcProviders is a parsable slice of OidcProvider.
type OidcProviders []*OidcProvider
