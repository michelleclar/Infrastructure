// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"oidc/ent/oidcprovider"
	"oidc/ent/pet"
	"oidc/ent/predicate"
	"oidc/ent/user"
	"sync"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeOidcProvider = "OidcProvider"
	TypePet          = "Pet"
	TypeUser         = "User"
)

// OidcProviderMutation represents an operation that mutates the OidcProvider nodes in the graph.
type OidcProviderMutation struct {
	config
	op                        Op
	typ                       string
	id                        *int
	oidc_provider_id          *int64
	addoidc_provider_id       *int64
	oidc_provider_name        *string
	oidc_provider_description *string
	issuer                    *string
	proxy_url                 *string
	client_id                 *string
	client_secret             *string
	redirect_uri              *string
	endpoints                 *[]string
	appendendpoints           []string
	clearedFields             map[string]struct{}
	done                      bool
	oldValue                  func(context.Context) (*OidcProvider, error)
	predicates                []predicate.OidcProvider
}

var _ ent.Mutation = (*OidcProviderMutation)(nil)

// oidcproviderOption allows management of the mutation configuration using functional options.
type oidcproviderOption func(*OidcProviderMutation)

// newOidcProviderMutation creates new mutation for the OidcProvider entity.
func newOidcProviderMutation(c config, op Op, opts ...oidcproviderOption) *OidcProviderMutation {
	m := &OidcProviderMutation{
		config:        c,
		op:            op,
		typ:           TypeOidcProvider,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withOidcProviderID sets the ID field of the mutation.
func withOidcProviderID(id int) oidcproviderOption {
	return func(m *OidcProviderMutation) {
		var (
			err   error
			once  sync.Once
			value *OidcProvider
		)
		m.oldValue = func(ctx context.Context) (*OidcProvider, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().OidcProvider.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withOidcProvider sets the old OidcProvider of the mutation.
func withOidcProvider(node *OidcProvider) oidcproviderOption {
	return func(m *OidcProviderMutation) {
		m.oldValue = func(context.Context) (*OidcProvider, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m OidcProviderMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m OidcProviderMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *OidcProviderMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *OidcProviderMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().OidcProvider.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetOidcProviderID sets the "oidc_provider_id" field.
func (m *OidcProviderMutation) SetOidcProviderID(i int64) {
	m.oidc_provider_id = &i
	m.addoidc_provider_id = nil
}

// OidcProviderID returns the value of the "oidc_provider_id" field in the mutation.
func (m *OidcProviderMutation) OidcProviderID() (r int64, exists bool) {
	v := m.oidc_provider_id
	if v == nil {
		return
	}
	return *v, true
}

// OldOidcProviderID returns the old "oidc_provider_id" field's value of the OidcProvider entity.
// If the OidcProvider object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OidcProviderMutation) OldOidcProviderID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOidcProviderID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOidcProviderID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOidcProviderID: %w", err)
	}
	return oldValue.OidcProviderID, nil
}

// AddOidcProviderID adds i to the "oidc_provider_id" field.
func (m *OidcProviderMutation) AddOidcProviderID(i int64) {
	if m.addoidc_provider_id != nil {
		*m.addoidc_provider_id += i
	} else {
		m.addoidc_provider_id = &i
	}
}

// AddedOidcProviderID returns the value that was added to the "oidc_provider_id" field in this mutation.
func (m *OidcProviderMutation) AddedOidcProviderID() (r int64, exists bool) {
	v := m.addoidc_provider_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetOidcProviderID resets all changes to the "oidc_provider_id" field.
func (m *OidcProviderMutation) ResetOidcProviderID() {
	m.oidc_provider_id = nil
	m.addoidc_provider_id = nil
}

// SetOidcProviderName sets the "oidc_provider_name" field.
func (m *OidcProviderMutation) SetOidcProviderName(s string) {
	m.oidc_provider_name = &s
}

// OidcProviderName returns the value of the "oidc_provider_name" field in the mutation.
func (m *OidcProviderMutation) OidcProviderName() (r string, exists bool) {
	v := m.oidc_provider_name
	if v == nil {
		return
	}
	return *v, true
}

// OldOidcProviderName returns the old "oidc_provider_name" field's value of the OidcProvider entity.
// If the OidcProvider object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OidcProviderMutation) OldOidcProviderName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOidcProviderName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOidcProviderName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOidcProviderName: %w", err)
	}
	return oldValue.OidcProviderName, nil
}

// ResetOidcProviderName resets all changes to the "oidc_provider_name" field.
func (m *OidcProviderMutation) ResetOidcProviderName() {
	m.oidc_provider_name = nil
}

// SetOidcProviderDescription sets the "oidc_provider_description" field.
func (m *OidcProviderMutation) SetOidcProviderDescription(s string) {
	m.oidc_provider_description = &s
}

// OidcProviderDescription returns the value of the "oidc_provider_description" field in the mutation.
func (m *OidcProviderMutation) OidcProviderDescription() (r string, exists bool) {
	v := m.oidc_provider_description
	if v == nil {
		return
	}
	return *v, true
}

// OldOidcProviderDescription returns the old "oidc_provider_description" field's value of the OidcProvider entity.
// If the OidcProvider object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OidcProviderMutation) OldOidcProviderDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOidcProviderDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOidcProviderDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOidcProviderDescription: %w", err)
	}
	return oldValue.OidcProviderDescription, nil
}

// ClearOidcProviderDescription clears the value of the "oidc_provider_description" field.
func (m *OidcProviderMutation) ClearOidcProviderDescription() {
	m.oidc_provider_description = nil
	m.clearedFields[oidcprovider.FieldOidcProviderDescription] = struct{}{}
}

// OidcProviderDescriptionCleared returns if the "oidc_provider_description" field was cleared in this mutation.
func (m *OidcProviderMutation) OidcProviderDescriptionCleared() bool {
	_, ok := m.clearedFields[oidcprovider.FieldOidcProviderDescription]
	return ok
}

// ResetOidcProviderDescription resets all changes to the "oidc_provider_description" field.
func (m *OidcProviderMutation) ResetOidcProviderDescription() {
	m.oidc_provider_description = nil
	delete(m.clearedFields, oidcprovider.FieldOidcProviderDescription)
}

// SetIssuer sets the "issuer" field.
func (m *OidcProviderMutation) SetIssuer(s string) {
	m.issuer = &s
}

// Issuer returns the value of the "issuer" field in the mutation.
func (m *OidcProviderMutation) Issuer() (r string, exists bool) {
	v := m.issuer
	if v == nil {
		return
	}
	return *v, true
}

// OldIssuer returns the old "issuer" field's value of the OidcProvider entity.
// If the OidcProvider object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OidcProviderMutation) OldIssuer(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIssuer is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIssuer requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIssuer: %w", err)
	}
	return oldValue.Issuer, nil
}

// ResetIssuer resets all changes to the "issuer" field.
func (m *OidcProviderMutation) ResetIssuer() {
	m.issuer = nil
}

// SetProxyURL sets the "proxy_url" field.
func (m *OidcProviderMutation) SetProxyURL(s string) {
	m.proxy_url = &s
}

// ProxyURL returns the value of the "proxy_url" field in the mutation.
func (m *OidcProviderMutation) ProxyURL() (r string, exists bool) {
	v := m.proxy_url
	if v == nil {
		return
	}
	return *v, true
}

// OldProxyURL returns the old "proxy_url" field's value of the OidcProvider entity.
// If the OidcProvider object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OidcProviderMutation) OldProxyURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProxyURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProxyURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProxyURL: %w", err)
	}
	return oldValue.ProxyURL, nil
}

// ClearProxyURL clears the value of the "proxy_url" field.
func (m *OidcProviderMutation) ClearProxyURL() {
	m.proxy_url = nil
	m.clearedFields[oidcprovider.FieldProxyURL] = struct{}{}
}

// ProxyURLCleared returns if the "proxy_url" field was cleared in this mutation.
func (m *OidcProviderMutation) ProxyURLCleared() bool {
	_, ok := m.clearedFields[oidcprovider.FieldProxyURL]
	return ok
}

// ResetProxyURL resets all changes to the "proxy_url" field.
func (m *OidcProviderMutation) ResetProxyURL() {
	m.proxy_url = nil
	delete(m.clearedFields, oidcprovider.FieldProxyURL)
}

// SetClientID sets the "client_id" field.
func (m *OidcProviderMutation) SetClientID(s string) {
	m.client_id = &s
}

// ClientID returns the value of the "client_id" field in the mutation.
func (m *OidcProviderMutation) ClientID() (r string, exists bool) {
	v := m.client_id
	if v == nil {
		return
	}
	return *v, true
}

// OldClientID returns the old "client_id" field's value of the OidcProvider entity.
// If the OidcProvider object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OidcProviderMutation) OldClientID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldClientID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldClientID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldClientID: %w", err)
	}
	return oldValue.ClientID, nil
}

// ResetClientID resets all changes to the "client_id" field.
func (m *OidcProviderMutation) ResetClientID() {
	m.client_id = nil
}

// SetClientSecret sets the "client_secret" field.
func (m *OidcProviderMutation) SetClientSecret(s string) {
	m.client_secret = &s
}

// ClientSecret returns the value of the "client_secret" field in the mutation.
func (m *OidcProviderMutation) ClientSecret() (r string, exists bool) {
	v := m.client_secret
	if v == nil {
		return
	}
	return *v, true
}

// OldClientSecret returns the old "client_secret" field's value of the OidcProvider entity.
// If the OidcProvider object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OidcProviderMutation) OldClientSecret(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldClientSecret is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldClientSecret requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldClientSecret: %w", err)
	}
	return oldValue.ClientSecret, nil
}

// ResetClientSecret resets all changes to the "client_secret" field.
func (m *OidcProviderMutation) ResetClientSecret() {
	m.client_secret = nil
}

// SetRedirectURI sets the "redirect_uri" field.
func (m *OidcProviderMutation) SetRedirectURI(s string) {
	m.redirect_uri = &s
}

// RedirectURI returns the value of the "redirect_uri" field in the mutation.
func (m *OidcProviderMutation) RedirectURI() (r string, exists bool) {
	v := m.redirect_uri
	if v == nil {
		return
	}
	return *v, true
}

// OldRedirectURI returns the old "redirect_uri" field's value of the OidcProvider entity.
// If the OidcProvider object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OidcProviderMutation) OldRedirectURI(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRedirectURI is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRedirectURI requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRedirectURI: %w", err)
	}
	return oldValue.RedirectURI, nil
}

// ResetRedirectURI resets all changes to the "redirect_uri" field.
func (m *OidcProviderMutation) ResetRedirectURI() {
	m.redirect_uri = nil
}

// SetEndpoints sets the "endpoints" field.
func (m *OidcProviderMutation) SetEndpoints(s []string) {
	m.endpoints = &s
	m.appendendpoints = nil
}

// Endpoints returns the value of the "endpoints" field in the mutation.
func (m *OidcProviderMutation) Endpoints() (r []string, exists bool) {
	v := m.endpoints
	if v == nil {
		return
	}
	return *v, true
}

// OldEndpoints returns the old "endpoints" field's value of the OidcProvider entity.
// If the OidcProvider object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OidcProviderMutation) OldEndpoints(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEndpoints is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEndpoints requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEndpoints: %w", err)
	}
	return oldValue.Endpoints, nil
}

// AppendEndpoints adds s to the "endpoints" field.
func (m *OidcProviderMutation) AppendEndpoints(s []string) {
	m.appendendpoints = append(m.appendendpoints, s...)
}

// AppendedEndpoints returns the list of values that were appended to the "endpoints" field in this mutation.
func (m *OidcProviderMutation) AppendedEndpoints() ([]string, bool) {
	if len(m.appendendpoints) == 0 {
		return nil, false
	}
	return m.appendendpoints, true
}

// ClearEndpoints clears the value of the "endpoints" field.
func (m *OidcProviderMutation) ClearEndpoints() {
	m.endpoints = nil
	m.appendendpoints = nil
	m.clearedFields[oidcprovider.FieldEndpoints] = struct{}{}
}

// EndpointsCleared returns if the "endpoints" field was cleared in this mutation.
func (m *OidcProviderMutation) EndpointsCleared() bool {
	_, ok := m.clearedFields[oidcprovider.FieldEndpoints]
	return ok
}

// ResetEndpoints resets all changes to the "endpoints" field.
func (m *OidcProviderMutation) ResetEndpoints() {
	m.endpoints = nil
	m.appendendpoints = nil
	delete(m.clearedFields, oidcprovider.FieldEndpoints)
}

// Where appends a list predicates to the OidcProviderMutation builder.
func (m *OidcProviderMutation) Where(ps ...predicate.OidcProvider) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the OidcProviderMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *OidcProviderMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.OidcProvider, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *OidcProviderMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *OidcProviderMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (OidcProvider).
func (m *OidcProviderMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *OidcProviderMutation) Fields() []string {
	fields := make([]string, 0, 9)
	if m.oidc_provider_id != nil {
		fields = append(fields, oidcprovider.FieldOidcProviderID)
	}
	if m.oidc_provider_name != nil {
		fields = append(fields, oidcprovider.FieldOidcProviderName)
	}
	if m.oidc_provider_description != nil {
		fields = append(fields, oidcprovider.FieldOidcProviderDescription)
	}
	if m.issuer != nil {
		fields = append(fields, oidcprovider.FieldIssuer)
	}
	if m.proxy_url != nil {
		fields = append(fields, oidcprovider.FieldProxyURL)
	}
	if m.client_id != nil {
		fields = append(fields, oidcprovider.FieldClientID)
	}
	if m.client_secret != nil {
		fields = append(fields, oidcprovider.FieldClientSecret)
	}
	if m.redirect_uri != nil {
		fields = append(fields, oidcprovider.FieldRedirectURI)
	}
	if m.endpoints != nil {
		fields = append(fields, oidcprovider.FieldEndpoints)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *OidcProviderMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case oidcprovider.FieldOidcProviderID:
		return m.OidcProviderID()
	case oidcprovider.FieldOidcProviderName:
		return m.OidcProviderName()
	case oidcprovider.FieldOidcProviderDescription:
		return m.OidcProviderDescription()
	case oidcprovider.FieldIssuer:
		return m.Issuer()
	case oidcprovider.FieldProxyURL:
		return m.ProxyURL()
	case oidcprovider.FieldClientID:
		return m.ClientID()
	case oidcprovider.FieldClientSecret:
		return m.ClientSecret()
	case oidcprovider.FieldRedirectURI:
		return m.RedirectURI()
	case oidcprovider.FieldEndpoints:
		return m.Endpoints()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *OidcProviderMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case oidcprovider.FieldOidcProviderID:
		return m.OldOidcProviderID(ctx)
	case oidcprovider.FieldOidcProviderName:
		return m.OldOidcProviderName(ctx)
	case oidcprovider.FieldOidcProviderDescription:
		return m.OldOidcProviderDescription(ctx)
	case oidcprovider.FieldIssuer:
		return m.OldIssuer(ctx)
	case oidcprovider.FieldProxyURL:
		return m.OldProxyURL(ctx)
	case oidcprovider.FieldClientID:
		return m.OldClientID(ctx)
	case oidcprovider.FieldClientSecret:
		return m.OldClientSecret(ctx)
	case oidcprovider.FieldRedirectURI:
		return m.OldRedirectURI(ctx)
	case oidcprovider.FieldEndpoints:
		return m.OldEndpoints(ctx)
	}
	return nil, fmt.Errorf("unknown OidcProvider field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OidcProviderMutation) SetField(name string, value ent.Value) error {
	switch name {
	case oidcprovider.FieldOidcProviderID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOidcProviderID(v)
		return nil
	case oidcprovider.FieldOidcProviderName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOidcProviderName(v)
		return nil
	case oidcprovider.FieldOidcProviderDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOidcProviderDescription(v)
		return nil
	case oidcprovider.FieldIssuer:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIssuer(v)
		return nil
	case oidcprovider.FieldProxyURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProxyURL(v)
		return nil
	case oidcprovider.FieldClientID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetClientID(v)
		return nil
	case oidcprovider.FieldClientSecret:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetClientSecret(v)
		return nil
	case oidcprovider.FieldRedirectURI:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRedirectURI(v)
		return nil
	case oidcprovider.FieldEndpoints:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEndpoints(v)
		return nil
	}
	return fmt.Errorf("unknown OidcProvider field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *OidcProviderMutation) AddedFields() []string {
	var fields []string
	if m.addoidc_provider_id != nil {
		fields = append(fields, oidcprovider.FieldOidcProviderID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *OidcProviderMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case oidcprovider.FieldOidcProviderID:
		return m.AddedOidcProviderID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OidcProviderMutation) AddField(name string, value ent.Value) error {
	switch name {
	case oidcprovider.FieldOidcProviderID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddOidcProviderID(v)
		return nil
	}
	return fmt.Errorf("unknown OidcProvider numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *OidcProviderMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(oidcprovider.FieldOidcProviderDescription) {
		fields = append(fields, oidcprovider.FieldOidcProviderDescription)
	}
	if m.FieldCleared(oidcprovider.FieldProxyURL) {
		fields = append(fields, oidcprovider.FieldProxyURL)
	}
	if m.FieldCleared(oidcprovider.FieldEndpoints) {
		fields = append(fields, oidcprovider.FieldEndpoints)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *OidcProviderMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *OidcProviderMutation) ClearField(name string) error {
	switch name {
	case oidcprovider.FieldOidcProviderDescription:
		m.ClearOidcProviderDescription()
		return nil
	case oidcprovider.FieldProxyURL:
		m.ClearProxyURL()
		return nil
	case oidcprovider.FieldEndpoints:
		m.ClearEndpoints()
		return nil
	}
	return fmt.Errorf("unknown OidcProvider nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *OidcProviderMutation) ResetField(name string) error {
	switch name {
	case oidcprovider.FieldOidcProviderID:
		m.ResetOidcProviderID()
		return nil
	case oidcprovider.FieldOidcProviderName:
		m.ResetOidcProviderName()
		return nil
	case oidcprovider.FieldOidcProviderDescription:
		m.ResetOidcProviderDescription()
		return nil
	case oidcprovider.FieldIssuer:
		m.ResetIssuer()
		return nil
	case oidcprovider.FieldProxyURL:
		m.ResetProxyURL()
		return nil
	case oidcprovider.FieldClientID:
		m.ResetClientID()
		return nil
	case oidcprovider.FieldClientSecret:
		m.ResetClientSecret()
		return nil
	case oidcprovider.FieldRedirectURI:
		m.ResetRedirectURI()
		return nil
	case oidcprovider.FieldEndpoints:
		m.ResetEndpoints()
		return nil
	}
	return fmt.Errorf("unknown OidcProvider field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *OidcProviderMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *OidcProviderMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *OidcProviderMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *OidcProviderMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *OidcProviderMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *OidcProviderMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *OidcProviderMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown OidcProvider unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *OidcProviderMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown OidcProvider edge %s", name)
}

// PetMutation represents an operation that mutates the Pet nodes in the graph.
type PetMutation struct {
	config
	op            Op
	typ           string
	id            *int
	pet_id        *int32
	addpet_id     *int32
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Pet, error)
	predicates    []predicate.Pet
}

var _ ent.Mutation = (*PetMutation)(nil)

// petOption allows management of the mutation configuration using functional options.
type petOption func(*PetMutation)

// newPetMutation creates new mutation for the Pet entity.
func newPetMutation(c config, op Op, opts ...petOption) *PetMutation {
	m := &PetMutation{
		config:        c,
		op:            op,
		typ:           TypePet,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPetID sets the ID field of the mutation.
func withPetID(id int) petOption {
	return func(m *PetMutation) {
		var (
			err   error
			once  sync.Once
			value *Pet
		)
		m.oldValue = func(ctx context.Context) (*Pet, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Pet.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPet sets the old Pet of the mutation.
func withPet(node *Pet) petOption {
	return func(m *PetMutation) {
		m.oldValue = func(context.Context) (*Pet, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PetMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PetMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *PetMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *PetMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Pet.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetPetID sets the "pet_id" field.
func (m *PetMutation) SetPetID(i int32) {
	m.pet_id = &i
	m.addpet_id = nil
}

// PetID returns the value of the "pet_id" field in the mutation.
func (m *PetMutation) PetID() (r int32, exists bool) {
	v := m.pet_id
	if v == nil {
		return
	}
	return *v, true
}

// OldPetID returns the old "pet_id" field's value of the Pet entity.
// If the Pet object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PetMutation) OldPetID(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPetID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPetID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPetID: %w", err)
	}
	return oldValue.PetID, nil
}

// AddPetID adds i to the "pet_id" field.
func (m *PetMutation) AddPetID(i int32) {
	if m.addpet_id != nil {
		*m.addpet_id += i
	} else {
		m.addpet_id = &i
	}
}

// AddedPetID returns the value that was added to the "pet_id" field in this mutation.
func (m *PetMutation) AddedPetID() (r int32, exists bool) {
	v := m.addpet_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetPetID resets all changes to the "pet_id" field.
func (m *PetMutation) ResetPetID() {
	m.pet_id = nil
	m.addpet_id = nil
}

// Where appends a list predicates to the PetMutation builder.
func (m *PetMutation) Where(ps ...predicate.Pet) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the PetMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *PetMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Pet, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *PetMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *PetMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Pet).
func (m *PetMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PetMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.pet_id != nil {
		fields = append(fields, pet.FieldPetID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PetMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case pet.FieldPetID:
		return m.PetID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PetMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case pet.FieldPetID:
		return m.OldPetID(ctx)
	}
	return nil, fmt.Errorf("unknown Pet field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PetMutation) SetField(name string, value ent.Value) error {
	switch name {
	case pet.FieldPetID:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPetID(v)
		return nil
	}
	return fmt.Errorf("unknown Pet field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PetMutation) AddedFields() []string {
	var fields []string
	if m.addpet_id != nil {
		fields = append(fields, pet.FieldPetID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PetMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case pet.FieldPetID:
		return m.AddedPetID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PetMutation) AddField(name string, value ent.Value) error {
	switch name {
	case pet.FieldPetID:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPetID(v)
		return nil
	}
	return fmt.Errorf("unknown Pet numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PetMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PetMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PetMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Pet nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PetMutation) ResetField(name string) error {
	switch name {
	case pet.FieldPetID:
		m.ResetPetID()
		return nil
	}
	return fmt.Errorf("unknown Pet field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PetMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PetMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PetMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PetMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PetMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PetMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PetMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Pet unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PetMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Pet edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op            Op
	typ           string
	id            *int
	user_id       *int64
	adduser_id    *int64
	age           *int
	addage        *int
	name          *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*User, error)
	predicates    []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id int) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetUserID sets the "user_id" field.
func (m *UserMutation) SetUserID(i int64) {
	m.user_id = &i
	m.adduser_id = nil
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *UserMutation) UserID() (r int64, exists bool) {
	v := m.user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUserID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// AddUserID adds i to the "user_id" field.
func (m *UserMutation) AddUserID(i int64) {
	if m.adduser_id != nil {
		*m.adduser_id += i
	} else {
		m.adduser_id = &i
	}
}

// AddedUserID returns the value that was added to the "user_id" field in this mutation.
func (m *UserMutation) AddedUserID() (r int64, exists bool) {
	v := m.adduser_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetUserID resets all changes to the "user_id" field.
func (m *UserMutation) ResetUserID() {
	m.user_id = nil
	m.adduser_id = nil
}

// SetAge sets the "age" field.
func (m *UserMutation) SetAge(i int) {
	m.age = &i
	m.addage = nil
}

// Age returns the value of the "age" field in the mutation.
func (m *UserMutation) Age() (r int, exists bool) {
	v := m.age
	if v == nil {
		return
	}
	return *v, true
}

// OldAge returns the old "age" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldAge(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAge is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAge requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAge: %w", err)
	}
	return oldValue.Age, nil
}

// AddAge adds i to the "age" field.
func (m *UserMutation) AddAge(i int) {
	if m.addage != nil {
		*m.addage += i
	} else {
		m.addage = &i
	}
}

// AddedAge returns the value that was added to the "age" field in this mutation.
func (m *UserMutation) AddedAge() (r int, exists bool) {
	v := m.addage
	if v == nil {
		return
	}
	return *v, true
}

// ResetAge resets all changes to the "age" field.
func (m *UserMutation) ResetAge() {
	m.age = nil
	m.addage = nil
}

// SetName sets the "name" field.
func (m *UserMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *UserMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *UserMutation) ResetName() {
	m.name = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.User, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.user_id != nil {
		fields = append(fields, user.FieldUserID)
	}
	if m.age != nil {
		fields = append(fields, user.FieldAge)
	}
	if m.name != nil {
		fields = append(fields, user.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldUserID:
		return m.UserID()
	case user.FieldAge:
		return m.Age()
	case user.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldUserID:
		return m.OldUserID(ctx)
	case user.FieldAge:
		return m.OldAge(ctx)
	case user.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldUserID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case user.FieldAge:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAge(v)
		return nil
	case user.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	var fields []string
	if m.adduser_id != nil {
		fields = append(fields, user.FieldUserID)
	}
	if m.addage != nil {
		fields = append(fields, user.FieldAge)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case user.FieldUserID:
		return m.AddedUserID()
	case user.FieldAge:
		return m.AddedAge()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	case user.FieldUserID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUserID(v)
		return nil
	case user.FieldAge:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAge(v)
		return nil
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldUserID:
		m.ResetUserID()
		return nil
	case user.FieldAge:
		m.ResetAge()
		return nil
	case user.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown User edge %s", name)
}
