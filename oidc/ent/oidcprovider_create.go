// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"oidc/ent/oidcprovider"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// OidcProviderCreate is the builder for creating a OidcProvider entity.
type OidcProviderCreate struct {
	config
	mutation *OidcProviderMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetOidcProviderID sets the "oidc_provider_id" field.
func (opc *OidcProviderCreate) SetOidcProviderID(i int64) *OidcProviderCreate {
	opc.mutation.SetOidcProviderID(i)
	return opc
}

// SetNillableOidcProviderID sets the "oidc_provider_id" field if the given value is not nil.
func (opc *OidcProviderCreate) SetNillableOidcProviderID(i *int64) *OidcProviderCreate {
	if i != nil {
		opc.SetOidcProviderID(*i)
	}
	return opc
}

// SetOidcProviderName sets the "oidc_provider_name" field.
func (opc *OidcProviderCreate) SetOidcProviderName(s string) *OidcProviderCreate {
	opc.mutation.SetOidcProviderName(s)
	return opc
}

// SetNillableOidcProviderName sets the "oidc_provider_name" field if the given value is not nil.
func (opc *OidcProviderCreate) SetNillableOidcProviderName(s *string) *OidcProviderCreate {
	if s != nil {
		opc.SetOidcProviderName(*s)
	}
	return opc
}

// SetOidcProviderDescription sets the "oidc_provider_description" field.
func (opc *OidcProviderCreate) SetOidcProviderDescription(s string) *OidcProviderCreate {
	opc.mutation.SetOidcProviderDescription(s)
	return opc
}

// SetNillableOidcProviderDescription sets the "oidc_provider_description" field if the given value is not nil.
func (opc *OidcProviderCreate) SetNillableOidcProviderDescription(s *string) *OidcProviderCreate {
	if s != nil {
		opc.SetOidcProviderDescription(*s)
	}
	return opc
}

// SetIssuer sets the "issuer" field.
func (opc *OidcProviderCreate) SetIssuer(s string) *OidcProviderCreate {
	opc.mutation.SetIssuer(s)
	return opc
}

// SetProxyURL sets the "proxy_url" field.
func (opc *OidcProviderCreate) SetProxyURL(s string) *OidcProviderCreate {
	opc.mutation.SetProxyURL(s)
	return opc
}

// SetNillableProxyURL sets the "proxy_url" field if the given value is not nil.
func (opc *OidcProviderCreate) SetNillableProxyURL(s *string) *OidcProviderCreate {
	if s != nil {
		opc.SetProxyURL(*s)
	}
	return opc
}

// SetClientID sets the "client_id" field.
func (opc *OidcProviderCreate) SetClientID(s string) *OidcProviderCreate {
	opc.mutation.SetClientID(s)
	return opc
}

// SetClientSecret sets the "client_secret" field.
func (opc *OidcProviderCreate) SetClientSecret(s string) *OidcProviderCreate {
	opc.mutation.SetClientSecret(s)
	return opc
}

// SetRedirectURI sets the "redirect_uri" field.
func (opc *OidcProviderCreate) SetRedirectURI(s string) *OidcProviderCreate {
	opc.mutation.SetRedirectURI(s)
	return opc
}

// SetEndpoints sets the "endpoints" field.
func (opc *OidcProviderCreate) SetEndpoints(s []string) *OidcProviderCreate {
	opc.mutation.SetEndpoints(s)
	return opc
}

// Mutation returns the OidcProviderMutation object of the builder.
func (opc *OidcProviderCreate) Mutation() *OidcProviderMutation {
	return opc.mutation
}

// Save creates the OidcProvider in the database.
func (opc *OidcProviderCreate) Save(ctx context.Context) (*OidcProvider, error) {
	opc.defaults()
	return withHooks(ctx, opc.sqlSave, opc.mutation, opc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (opc *OidcProviderCreate) SaveX(ctx context.Context) *OidcProvider {
	v, err := opc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (opc *OidcProviderCreate) Exec(ctx context.Context) error {
	_, err := opc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (opc *OidcProviderCreate) ExecX(ctx context.Context) {
	if err := opc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (opc *OidcProviderCreate) defaults() {
	if _, ok := opc.mutation.OidcProviderID(); !ok {
		v := oidcprovider.DefaultOidcProviderID()
		opc.mutation.SetOidcProviderID(v)
	}
	if _, ok := opc.mutation.OidcProviderName(); !ok {
		v := oidcprovider.DefaultOidcProviderName
		opc.mutation.SetOidcProviderName(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (opc *OidcProviderCreate) check() error {
	if _, ok := opc.mutation.OidcProviderID(); !ok {
		return &ValidationError{Name: "oidc_provider_id", err: errors.New(`ent: missing required field "OidcProvider.oidc_provider_id"`)}
	}
	if _, ok := opc.mutation.OidcProviderName(); !ok {
		return &ValidationError{Name: "oidc_provider_name", err: errors.New(`ent: missing required field "OidcProvider.oidc_provider_name"`)}
	}
	if _, ok := opc.mutation.Issuer(); !ok {
		return &ValidationError{Name: "issuer", err: errors.New(`ent: missing required field "OidcProvider.issuer"`)}
	}
	if v, ok := opc.mutation.Issuer(); ok {
		if err := oidcprovider.IssuerValidator(v); err != nil {
			return &ValidationError{Name: "issuer", err: fmt.Errorf(`ent: validator failed for field "OidcProvider.issuer": %w`, err)}
		}
	}
	if _, ok := opc.mutation.ClientID(); !ok {
		return &ValidationError{Name: "client_id", err: errors.New(`ent: missing required field "OidcProvider.client_id"`)}
	}
	if _, ok := opc.mutation.ClientSecret(); !ok {
		return &ValidationError{Name: "client_secret", err: errors.New(`ent: missing required field "OidcProvider.client_secret"`)}
	}
	if _, ok := opc.mutation.RedirectURI(); !ok {
		return &ValidationError{Name: "redirect_uri", err: errors.New(`ent: missing required field "OidcProvider.redirect_uri"`)}
	}
	return nil
}

func (opc *OidcProviderCreate) sqlSave(ctx context.Context) (*OidcProvider, error) {
	if err := opc.check(); err != nil {
		return nil, err
	}
	_node, _spec := opc.createSpec()
	if err := sqlgraph.CreateNode(ctx, opc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	opc.mutation.id = &_node.ID
	opc.mutation.done = true
	return _node, nil
}

func (opc *OidcProviderCreate) createSpec() (*OidcProvider, *sqlgraph.CreateSpec) {
	var (
		_node = &OidcProvider{config: opc.config}
		_spec = sqlgraph.NewCreateSpec(oidcprovider.Table, sqlgraph.NewFieldSpec(oidcprovider.FieldID, field.TypeInt))
	)
	_spec.Schema = opc.schemaConfig.OidcProvider
	_spec.OnConflict = opc.conflict
	if value, ok := opc.mutation.OidcProviderID(); ok {
		_spec.SetField(oidcprovider.FieldOidcProviderID, field.TypeInt64, value)
		_node.OidcProviderID = value
	}
	if value, ok := opc.mutation.OidcProviderName(); ok {
		_spec.SetField(oidcprovider.FieldOidcProviderName, field.TypeString, value)
		_node.OidcProviderName = value
	}
	if value, ok := opc.mutation.OidcProviderDescription(); ok {
		_spec.SetField(oidcprovider.FieldOidcProviderDescription, field.TypeString, value)
		_node.OidcProviderDescription = value
	}
	if value, ok := opc.mutation.Issuer(); ok {
		_spec.SetField(oidcprovider.FieldIssuer, field.TypeString, value)
		_node.Issuer = value
	}
	if value, ok := opc.mutation.ProxyURL(); ok {
		_spec.SetField(oidcprovider.FieldProxyURL, field.TypeString, value)
		_node.ProxyURL = value
	}
	if value, ok := opc.mutation.ClientID(); ok {
		_spec.SetField(oidcprovider.FieldClientID, field.TypeString, value)
		_node.ClientID = value
	}
	if value, ok := opc.mutation.ClientSecret(); ok {
		_spec.SetField(oidcprovider.FieldClientSecret, field.TypeString, value)
		_node.ClientSecret = value
	}
	if value, ok := opc.mutation.RedirectURI(); ok {
		_spec.SetField(oidcprovider.FieldRedirectURI, field.TypeString, value)
		_node.RedirectURI = value
	}
	if value, ok := opc.mutation.Endpoints(); ok {
		_spec.SetField(oidcprovider.FieldEndpoints, field.TypeJSON, value)
		_node.Endpoints = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.OidcProvider.Create().
//		SetOidcProviderID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OidcProviderUpsert) {
//			SetOidcProviderID(v+v).
//		}).
//		Exec(ctx)
func (opc *OidcProviderCreate) OnConflict(opts ...sql.ConflictOption) *OidcProviderUpsertOne {
	opc.conflict = opts
	return &OidcProviderUpsertOne{
		create: opc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.OidcProvider.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (opc *OidcProviderCreate) OnConflictColumns(columns ...string) *OidcProviderUpsertOne {
	opc.conflict = append(opc.conflict, sql.ConflictColumns(columns...))
	return &OidcProviderUpsertOne{
		create: opc,
	}
}

type (
	// OidcProviderUpsertOne is the builder for "upsert"-ing
	//  one OidcProvider node.
	OidcProviderUpsertOne struct {
		create *OidcProviderCreate
	}

	// OidcProviderUpsert is the "OnConflict" setter.
	OidcProviderUpsert struct {
		*sql.UpdateSet
	}
)

// SetOidcProviderName sets the "oidc_provider_name" field.
func (u *OidcProviderUpsert) SetOidcProviderName(v string) *OidcProviderUpsert {
	u.Set(oidcprovider.FieldOidcProviderName, v)
	return u
}

// UpdateOidcProviderName sets the "oidc_provider_name" field to the value that was provided on create.
func (u *OidcProviderUpsert) UpdateOidcProviderName() *OidcProviderUpsert {
	u.SetExcluded(oidcprovider.FieldOidcProviderName)
	return u
}

// SetOidcProviderDescription sets the "oidc_provider_description" field.
func (u *OidcProviderUpsert) SetOidcProviderDescription(v string) *OidcProviderUpsert {
	u.Set(oidcprovider.FieldOidcProviderDescription, v)
	return u
}

// UpdateOidcProviderDescription sets the "oidc_provider_description" field to the value that was provided on create.
func (u *OidcProviderUpsert) UpdateOidcProviderDescription() *OidcProviderUpsert {
	u.SetExcluded(oidcprovider.FieldOidcProviderDescription)
	return u
}

// ClearOidcProviderDescription clears the value of the "oidc_provider_description" field.
func (u *OidcProviderUpsert) ClearOidcProviderDescription() *OidcProviderUpsert {
	u.SetNull(oidcprovider.FieldOidcProviderDescription)
	return u
}

// SetIssuer sets the "issuer" field.
func (u *OidcProviderUpsert) SetIssuer(v string) *OidcProviderUpsert {
	u.Set(oidcprovider.FieldIssuer, v)
	return u
}

// UpdateIssuer sets the "issuer" field to the value that was provided on create.
func (u *OidcProviderUpsert) UpdateIssuer() *OidcProviderUpsert {
	u.SetExcluded(oidcprovider.FieldIssuer)
	return u
}

// SetProxyURL sets the "proxy_url" field.
func (u *OidcProviderUpsert) SetProxyURL(v string) *OidcProviderUpsert {
	u.Set(oidcprovider.FieldProxyURL, v)
	return u
}

// UpdateProxyURL sets the "proxy_url" field to the value that was provided on create.
func (u *OidcProviderUpsert) UpdateProxyURL() *OidcProviderUpsert {
	u.SetExcluded(oidcprovider.FieldProxyURL)
	return u
}

// ClearProxyURL clears the value of the "proxy_url" field.
func (u *OidcProviderUpsert) ClearProxyURL() *OidcProviderUpsert {
	u.SetNull(oidcprovider.FieldProxyURL)
	return u
}

// SetClientID sets the "client_id" field.
func (u *OidcProviderUpsert) SetClientID(v string) *OidcProviderUpsert {
	u.Set(oidcprovider.FieldClientID, v)
	return u
}

// UpdateClientID sets the "client_id" field to the value that was provided on create.
func (u *OidcProviderUpsert) UpdateClientID() *OidcProviderUpsert {
	u.SetExcluded(oidcprovider.FieldClientID)
	return u
}

// SetClientSecret sets the "client_secret" field.
func (u *OidcProviderUpsert) SetClientSecret(v string) *OidcProviderUpsert {
	u.Set(oidcprovider.FieldClientSecret, v)
	return u
}

// UpdateClientSecret sets the "client_secret" field to the value that was provided on create.
func (u *OidcProviderUpsert) UpdateClientSecret() *OidcProviderUpsert {
	u.SetExcluded(oidcprovider.FieldClientSecret)
	return u
}

// SetRedirectURI sets the "redirect_uri" field.
func (u *OidcProviderUpsert) SetRedirectURI(v string) *OidcProviderUpsert {
	u.Set(oidcprovider.FieldRedirectURI, v)
	return u
}

// UpdateRedirectURI sets the "redirect_uri" field to the value that was provided on create.
func (u *OidcProviderUpsert) UpdateRedirectURI() *OidcProviderUpsert {
	u.SetExcluded(oidcprovider.FieldRedirectURI)
	return u
}

// SetEndpoints sets the "endpoints" field.
func (u *OidcProviderUpsert) SetEndpoints(v []string) *OidcProviderUpsert {
	u.Set(oidcprovider.FieldEndpoints, v)
	return u
}

// UpdateEndpoints sets the "endpoints" field to the value that was provided on create.
func (u *OidcProviderUpsert) UpdateEndpoints() *OidcProviderUpsert {
	u.SetExcluded(oidcprovider.FieldEndpoints)
	return u
}

// ClearEndpoints clears the value of the "endpoints" field.
func (u *OidcProviderUpsert) ClearEndpoints() *OidcProviderUpsert {
	u.SetNull(oidcprovider.FieldEndpoints)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.OidcProvider.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *OidcProviderUpsertOne) UpdateNewValues() *OidcProviderUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.OidcProviderID(); exists {
			s.SetIgnore(oidcprovider.FieldOidcProviderID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.OidcProvider.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *OidcProviderUpsertOne) Ignore() *OidcProviderUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OidcProviderUpsertOne) DoNothing() *OidcProviderUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OidcProviderCreate.OnConflict
// documentation for more info.
func (u *OidcProviderUpsertOne) Update(set func(*OidcProviderUpsert)) *OidcProviderUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OidcProviderUpsert{UpdateSet: update})
	}))
	return u
}

// SetOidcProviderName sets the "oidc_provider_name" field.
func (u *OidcProviderUpsertOne) SetOidcProviderName(v string) *OidcProviderUpsertOne {
	return u.Update(func(s *OidcProviderUpsert) {
		s.SetOidcProviderName(v)
	})
}

// UpdateOidcProviderName sets the "oidc_provider_name" field to the value that was provided on create.
func (u *OidcProviderUpsertOne) UpdateOidcProviderName() *OidcProviderUpsertOne {
	return u.Update(func(s *OidcProviderUpsert) {
		s.UpdateOidcProviderName()
	})
}

// SetOidcProviderDescription sets the "oidc_provider_description" field.
func (u *OidcProviderUpsertOne) SetOidcProviderDescription(v string) *OidcProviderUpsertOne {
	return u.Update(func(s *OidcProviderUpsert) {
		s.SetOidcProviderDescription(v)
	})
}

// UpdateOidcProviderDescription sets the "oidc_provider_description" field to the value that was provided on create.
func (u *OidcProviderUpsertOne) UpdateOidcProviderDescription() *OidcProviderUpsertOne {
	return u.Update(func(s *OidcProviderUpsert) {
		s.UpdateOidcProviderDescription()
	})
}

// ClearOidcProviderDescription clears the value of the "oidc_provider_description" field.
func (u *OidcProviderUpsertOne) ClearOidcProviderDescription() *OidcProviderUpsertOne {
	return u.Update(func(s *OidcProviderUpsert) {
		s.ClearOidcProviderDescription()
	})
}

// SetIssuer sets the "issuer" field.
func (u *OidcProviderUpsertOne) SetIssuer(v string) *OidcProviderUpsertOne {
	return u.Update(func(s *OidcProviderUpsert) {
		s.SetIssuer(v)
	})
}

// UpdateIssuer sets the "issuer" field to the value that was provided on create.
func (u *OidcProviderUpsertOne) UpdateIssuer() *OidcProviderUpsertOne {
	return u.Update(func(s *OidcProviderUpsert) {
		s.UpdateIssuer()
	})
}

// SetProxyURL sets the "proxy_url" field.
func (u *OidcProviderUpsertOne) SetProxyURL(v string) *OidcProviderUpsertOne {
	return u.Update(func(s *OidcProviderUpsert) {
		s.SetProxyURL(v)
	})
}

// UpdateProxyURL sets the "proxy_url" field to the value that was provided on create.
func (u *OidcProviderUpsertOne) UpdateProxyURL() *OidcProviderUpsertOne {
	return u.Update(func(s *OidcProviderUpsert) {
		s.UpdateProxyURL()
	})
}

// ClearProxyURL clears the value of the "proxy_url" field.
func (u *OidcProviderUpsertOne) ClearProxyURL() *OidcProviderUpsertOne {
	return u.Update(func(s *OidcProviderUpsert) {
		s.ClearProxyURL()
	})
}

// SetClientID sets the "client_id" field.
func (u *OidcProviderUpsertOne) SetClientID(v string) *OidcProviderUpsertOne {
	return u.Update(func(s *OidcProviderUpsert) {
		s.SetClientID(v)
	})
}

// UpdateClientID sets the "client_id" field to the value that was provided on create.
func (u *OidcProviderUpsertOne) UpdateClientID() *OidcProviderUpsertOne {
	return u.Update(func(s *OidcProviderUpsert) {
		s.UpdateClientID()
	})
}

// SetClientSecret sets the "client_secret" field.
func (u *OidcProviderUpsertOne) SetClientSecret(v string) *OidcProviderUpsertOne {
	return u.Update(func(s *OidcProviderUpsert) {
		s.SetClientSecret(v)
	})
}

// UpdateClientSecret sets the "client_secret" field to the value that was provided on create.
func (u *OidcProviderUpsertOne) UpdateClientSecret() *OidcProviderUpsertOne {
	return u.Update(func(s *OidcProviderUpsert) {
		s.UpdateClientSecret()
	})
}

// SetRedirectURI sets the "redirect_uri" field.
func (u *OidcProviderUpsertOne) SetRedirectURI(v string) *OidcProviderUpsertOne {
	return u.Update(func(s *OidcProviderUpsert) {
		s.SetRedirectURI(v)
	})
}

// UpdateRedirectURI sets the "redirect_uri" field to the value that was provided on create.
func (u *OidcProviderUpsertOne) UpdateRedirectURI() *OidcProviderUpsertOne {
	return u.Update(func(s *OidcProviderUpsert) {
		s.UpdateRedirectURI()
	})
}

// SetEndpoints sets the "endpoints" field.
func (u *OidcProviderUpsertOne) SetEndpoints(v []string) *OidcProviderUpsertOne {
	return u.Update(func(s *OidcProviderUpsert) {
		s.SetEndpoints(v)
	})
}

// UpdateEndpoints sets the "endpoints" field to the value that was provided on create.
func (u *OidcProviderUpsertOne) UpdateEndpoints() *OidcProviderUpsertOne {
	return u.Update(func(s *OidcProviderUpsert) {
		s.UpdateEndpoints()
	})
}

// ClearEndpoints clears the value of the "endpoints" field.
func (u *OidcProviderUpsertOne) ClearEndpoints() *OidcProviderUpsertOne {
	return u.Update(func(s *OidcProviderUpsert) {
		s.ClearEndpoints()
	})
}

// Exec executes the query.
func (u *OidcProviderUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for OidcProviderCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OidcProviderUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *OidcProviderUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *OidcProviderUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// OidcProviderCreateBulk is the builder for creating many OidcProvider entities in bulk.
type OidcProviderCreateBulk struct {
	config
	err      error
	builders []*OidcProviderCreate
	conflict []sql.ConflictOption
}

// Save creates the OidcProvider entities in the database.
func (opcb *OidcProviderCreateBulk) Save(ctx context.Context) ([]*OidcProvider, error) {
	if opcb.err != nil {
		return nil, opcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(opcb.builders))
	nodes := make([]*OidcProvider, len(opcb.builders))
	mutators := make([]Mutator, len(opcb.builders))
	for i := range opcb.builders {
		func(i int, root context.Context) {
			builder := opcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OidcProviderMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, opcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = opcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, opcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, opcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (opcb *OidcProviderCreateBulk) SaveX(ctx context.Context) []*OidcProvider {
	v, err := opcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (opcb *OidcProviderCreateBulk) Exec(ctx context.Context) error {
	_, err := opcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (opcb *OidcProviderCreateBulk) ExecX(ctx context.Context) {
	if err := opcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.OidcProvider.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OidcProviderUpsert) {
//			SetOidcProviderID(v+v).
//		}).
//		Exec(ctx)
func (opcb *OidcProviderCreateBulk) OnConflict(opts ...sql.ConflictOption) *OidcProviderUpsertBulk {
	opcb.conflict = opts
	return &OidcProviderUpsertBulk{
		create: opcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.OidcProvider.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (opcb *OidcProviderCreateBulk) OnConflictColumns(columns ...string) *OidcProviderUpsertBulk {
	opcb.conflict = append(opcb.conflict, sql.ConflictColumns(columns...))
	return &OidcProviderUpsertBulk{
		create: opcb,
	}
}

// OidcProviderUpsertBulk is the builder for "upsert"-ing
// a bulk of OidcProvider nodes.
type OidcProviderUpsertBulk struct {
	create *OidcProviderCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.OidcProvider.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *OidcProviderUpsertBulk) UpdateNewValues() *OidcProviderUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.OidcProviderID(); exists {
				s.SetIgnore(oidcprovider.FieldOidcProviderID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.OidcProvider.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *OidcProviderUpsertBulk) Ignore() *OidcProviderUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OidcProviderUpsertBulk) DoNothing() *OidcProviderUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OidcProviderCreateBulk.OnConflict
// documentation for more info.
func (u *OidcProviderUpsertBulk) Update(set func(*OidcProviderUpsert)) *OidcProviderUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OidcProviderUpsert{UpdateSet: update})
	}))
	return u
}

// SetOidcProviderName sets the "oidc_provider_name" field.
func (u *OidcProviderUpsertBulk) SetOidcProviderName(v string) *OidcProviderUpsertBulk {
	return u.Update(func(s *OidcProviderUpsert) {
		s.SetOidcProviderName(v)
	})
}

// UpdateOidcProviderName sets the "oidc_provider_name" field to the value that was provided on create.
func (u *OidcProviderUpsertBulk) UpdateOidcProviderName() *OidcProviderUpsertBulk {
	return u.Update(func(s *OidcProviderUpsert) {
		s.UpdateOidcProviderName()
	})
}

// SetOidcProviderDescription sets the "oidc_provider_description" field.
func (u *OidcProviderUpsertBulk) SetOidcProviderDescription(v string) *OidcProviderUpsertBulk {
	return u.Update(func(s *OidcProviderUpsert) {
		s.SetOidcProviderDescription(v)
	})
}

// UpdateOidcProviderDescription sets the "oidc_provider_description" field to the value that was provided on create.
func (u *OidcProviderUpsertBulk) UpdateOidcProviderDescription() *OidcProviderUpsertBulk {
	return u.Update(func(s *OidcProviderUpsert) {
		s.UpdateOidcProviderDescription()
	})
}

// ClearOidcProviderDescription clears the value of the "oidc_provider_description" field.
func (u *OidcProviderUpsertBulk) ClearOidcProviderDescription() *OidcProviderUpsertBulk {
	return u.Update(func(s *OidcProviderUpsert) {
		s.ClearOidcProviderDescription()
	})
}

// SetIssuer sets the "issuer" field.
func (u *OidcProviderUpsertBulk) SetIssuer(v string) *OidcProviderUpsertBulk {
	return u.Update(func(s *OidcProviderUpsert) {
		s.SetIssuer(v)
	})
}

// UpdateIssuer sets the "issuer" field to the value that was provided on create.
func (u *OidcProviderUpsertBulk) UpdateIssuer() *OidcProviderUpsertBulk {
	return u.Update(func(s *OidcProviderUpsert) {
		s.UpdateIssuer()
	})
}

// SetProxyURL sets the "proxy_url" field.
func (u *OidcProviderUpsertBulk) SetProxyURL(v string) *OidcProviderUpsertBulk {
	return u.Update(func(s *OidcProviderUpsert) {
		s.SetProxyURL(v)
	})
}

// UpdateProxyURL sets the "proxy_url" field to the value that was provided on create.
func (u *OidcProviderUpsertBulk) UpdateProxyURL() *OidcProviderUpsertBulk {
	return u.Update(func(s *OidcProviderUpsert) {
		s.UpdateProxyURL()
	})
}

// ClearProxyURL clears the value of the "proxy_url" field.
func (u *OidcProviderUpsertBulk) ClearProxyURL() *OidcProviderUpsertBulk {
	return u.Update(func(s *OidcProviderUpsert) {
		s.ClearProxyURL()
	})
}

// SetClientID sets the "client_id" field.
func (u *OidcProviderUpsertBulk) SetClientID(v string) *OidcProviderUpsertBulk {
	return u.Update(func(s *OidcProviderUpsert) {
		s.SetClientID(v)
	})
}

// UpdateClientID sets the "client_id" field to the value that was provided on create.
func (u *OidcProviderUpsertBulk) UpdateClientID() *OidcProviderUpsertBulk {
	return u.Update(func(s *OidcProviderUpsert) {
		s.UpdateClientID()
	})
}

// SetClientSecret sets the "client_secret" field.
func (u *OidcProviderUpsertBulk) SetClientSecret(v string) *OidcProviderUpsertBulk {
	return u.Update(func(s *OidcProviderUpsert) {
		s.SetClientSecret(v)
	})
}

// UpdateClientSecret sets the "client_secret" field to the value that was provided on create.
func (u *OidcProviderUpsertBulk) UpdateClientSecret() *OidcProviderUpsertBulk {
	return u.Update(func(s *OidcProviderUpsert) {
		s.UpdateClientSecret()
	})
}

// SetRedirectURI sets the "redirect_uri" field.
func (u *OidcProviderUpsertBulk) SetRedirectURI(v string) *OidcProviderUpsertBulk {
	return u.Update(func(s *OidcProviderUpsert) {
		s.SetRedirectURI(v)
	})
}

// UpdateRedirectURI sets the "redirect_uri" field to the value that was provided on create.
func (u *OidcProviderUpsertBulk) UpdateRedirectURI() *OidcProviderUpsertBulk {
	return u.Update(func(s *OidcProviderUpsert) {
		s.UpdateRedirectURI()
	})
}

// SetEndpoints sets the "endpoints" field.
func (u *OidcProviderUpsertBulk) SetEndpoints(v []string) *OidcProviderUpsertBulk {
	return u.Update(func(s *OidcProviderUpsert) {
		s.SetEndpoints(v)
	})
}

// UpdateEndpoints sets the "endpoints" field to the value that was provided on create.
func (u *OidcProviderUpsertBulk) UpdateEndpoints() *OidcProviderUpsertBulk {
	return u.Update(func(s *OidcProviderUpsert) {
		s.UpdateEndpoints()
	})
}

// ClearEndpoints clears the value of the "endpoints" field.
func (u *OidcProviderUpsertBulk) ClearEndpoints() *OidcProviderUpsertBulk {
	return u.Update(func(s *OidcProviderUpsert) {
		s.ClearEndpoints()
	})
}

// Exec executes the query.
func (u *OidcProviderUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the OidcProviderCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for OidcProviderCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OidcProviderUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
