// Code generated by ent, DO NOT EDIT.

package oidcprovider

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the oidcprovider type in the database.
	Label = "oidc_provider"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldOidcProviderID holds the string denoting the oidc_provider_id field in the database.
	FieldOidcProviderID = "oidc_provider_id"
	// FieldOidcProviderName holds the string denoting the oidc_provider_name field in the database.
	FieldOidcProviderName = "oidc_provider_name"
	// FieldOidcProviderDescription holds the string denoting the oidc_provider_description field in the database.
	FieldOidcProviderDescription = "oidc_provider_description"
	// FieldIssuer holds the string denoting the issuer field in the database.
	FieldIssuer = "issuer"
	// FieldProxyURL holds the string denoting the proxy_url field in the database.
	FieldProxyURL = "proxy_url"
	// FieldClientID holds the string denoting the client_id field in the database.
	FieldClientID = "client_id"
	// FieldClientSecret holds the string denoting the client_secret field in the database.
	FieldClientSecret = "client_secret"
	// FieldRedirectURI holds the string denoting the redirect_uri field in the database.
	FieldRedirectURI = "redirect_uri"
	// FieldEndpoints holds the string denoting the endpoints field in the database.
	FieldEndpoints = "endpoints"
	// Table holds the table name of the oidcprovider in the database.
	Table = "oidc provider"
)

// Columns holds all SQL columns for oidcprovider fields.
var Columns = []string{
	FieldID,
	FieldOidcProviderID,
	FieldOidcProviderName,
	FieldOidcProviderDescription,
	FieldIssuer,
	FieldProxyURL,
	FieldClientID,
	FieldClientSecret,
	FieldRedirectURI,
	FieldEndpoints,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultOidcProviderID holds the default value on creation for the "oidc_provider_id" field.
	DefaultOidcProviderID func() int64
	// DefaultOidcProviderName holds the default value on creation for the "oidc_provider_name" field.
	DefaultOidcProviderName string
	// IssuerValidator is a validator for the "issuer" field. It is called by the builders before save.
	IssuerValidator func(string) error
)

// OrderOption defines the ordering options for the OidcProvider queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByOidcProviderID orders the results by the oidc_provider_id field.
func ByOidcProviderID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOidcProviderID, opts...).ToFunc()
}

// ByOidcProviderName orders the results by the oidc_provider_name field.
func ByOidcProviderName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOidcProviderName, opts...).ToFunc()
}

// ByOidcProviderDescription orders the results by the oidc_provider_description field.
func ByOidcProviderDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOidcProviderDescription, opts...).ToFunc()
}

// ByIssuer orders the results by the issuer field.
func ByIssuer(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIssuer, opts...).ToFunc()
}

// ByProxyURL orders the results by the proxy_url field.
func ByProxyURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProxyURL, opts...).ToFunc()
}

// ByClientID orders the results by the client_id field.
func ByClientID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldClientID, opts...).ToFunc()
}

// ByClientSecret orders the results by the client_secret field.
func ByClientSecret(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldClientSecret, opts...).ToFunc()
}

// ByRedirectURI orders the results by the redirect_uri field.
func ByRedirectURI(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRedirectURI, opts...).ToFunc()
}
