// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"oidc/ent/internal"
	"oidc/ent/oidcprovider"
	"oidc/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// OidcProviderUpdate is the builder for updating OidcProvider entities.
type OidcProviderUpdate struct {
	config
	hooks     []Hook
	mutation  *OidcProviderMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the OidcProviderUpdate builder.
func (opu *OidcProviderUpdate) Where(ps ...predicate.OidcProvider) *OidcProviderUpdate {
	opu.mutation.Where(ps...)
	return opu
}

// SetOidcProviderName sets the "oidc_provider_name" field.
func (opu *OidcProviderUpdate) SetOidcProviderName(s string) *OidcProviderUpdate {
	opu.mutation.SetOidcProviderName(s)
	return opu
}

// SetNillableOidcProviderName sets the "oidc_provider_name" field if the given value is not nil.
func (opu *OidcProviderUpdate) SetNillableOidcProviderName(s *string) *OidcProviderUpdate {
	if s != nil {
		opu.SetOidcProviderName(*s)
	}
	return opu
}

// SetOidcProviderDescription sets the "oidc_provider_description" field.
func (opu *OidcProviderUpdate) SetOidcProviderDescription(s string) *OidcProviderUpdate {
	opu.mutation.SetOidcProviderDescription(s)
	return opu
}

// SetNillableOidcProviderDescription sets the "oidc_provider_description" field if the given value is not nil.
func (opu *OidcProviderUpdate) SetNillableOidcProviderDescription(s *string) *OidcProviderUpdate {
	if s != nil {
		opu.SetOidcProviderDescription(*s)
	}
	return opu
}

// ClearOidcProviderDescription clears the value of the "oidc_provider_description" field.
func (opu *OidcProviderUpdate) ClearOidcProviderDescription() *OidcProviderUpdate {
	opu.mutation.ClearOidcProviderDescription()
	return opu
}

// SetIssuer sets the "issuer" field.
func (opu *OidcProviderUpdate) SetIssuer(s string) *OidcProviderUpdate {
	opu.mutation.SetIssuer(s)
	return opu
}

// SetNillableIssuer sets the "issuer" field if the given value is not nil.
func (opu *OidcProviderUpdate) SetNillableIssuer(s *string) *OidcProviderUpdate {
	if s != nil {
		opu.SetIssuer(*s)
	}
	return opu
}

// SetProxyURL sets the "proxy_url" field.
func (opu *OidcProviderUpdate) SetProxyURL(s string) *OidcProviderUpdate {
	opu.mutation.SetProxyURL(s)
	return opu
}

// SetNillableProxyURL sets the "proxy_url" field if the given value is not nil.
func (opu *OidcProviderUpdate) SetNillableProxyURL(s *string) *OidcProviderUpdate {
	if s != nil {
		opu.SetProxyURL(*s)
	}
	return opu
}

// ClearProxyURL clears the value of the "proxy_url" field.
func (opu *OidcProviderUpdate) ClearProxyURL() *OidcProviderUpdate {
	opu.mutation.ClearProxyURL()
	return opu
}

// SetClientID sets the "client_id" field.
func (opu *OidcProviderUpdate) SetClientID(s string) *OidcProviderUpdate {
	opu.mutation.SetClientID(s)
	return opu
}

// SetNillableClientID sets the "client_id" field if the given value is not nil.
func (opu *OidcProviderUpdate) SetNillableClientID(s *string) *OidcProviderUpdate {
	if s != nil {
		opu.SetClientID(*s)
	}
	return opu
}

// SetClientSecret sets the "client_secret" field.
func (opu *OidcProviderUpdate) SetClientSecret(s string) *OidcProviderUpdate {
	opu.mutation.SetClientSecret(s)
	return opu
}

// SetNillableClientSecret sets the "client_secret" field if the given value is not nil.
func (opu *OidcProviderUpdate) SetNillableClientSecret(s *string) *OidcProviderUpdate {
	if s != nil {
		opu.SetClientSecret(*s)
	}
	return opu
}

// SetRedirectURI sets the "redirect_uri" field.
func (opu *OidcProviderUpdate) SetRedirectURI(s string) *OidcProviderUpdate {
	opu.mutation.SetRedirectURI(s)
	return opu
}

// SetNillableRedirectURI sets the "redirect_uri" field if the given value is not nil.
func (opu *OidcProviderUpdate) SetNillableRedirectURI(s *string) *OidcProviderUpdate {
	if s != nil {
		opu.SetRedirectURI(*s)
	}
	return opu
}

// SetEndpoints sets the "endpoints" field.
func (opu *OidcProviderUpdate) SetEndpoints(s []string) *OidcProviderUpdate {
	opu.mutation.SetEndpoints(s)
	return opu
}

// AppendEndpoints appends s to the "endpoints" field.
func (opu *OidcProviderUpdate) AppendEndpoints(s []string) *OidcProviderUpdate {
	opu.mutation.AppendEndpoints(s)
	return opu
}

// ClearEndpoints clears the value of the "endpoints" field.
func (opu *OidcProviderUpdate) ClearEndpoints() *OidcProviderUpdate {
	opu.mutation.ClearEndpoints()
	return opu
}

// Mutation returns the OidcProviderMutation object of the builder.
func (opu *OidcProviderUpdate) Mutation() *OidcProviderMutation {
	return opu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (opu *OidcProviderUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, opu.sqlSave, opu.mutation, opu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (opu *OidcProviderUpdate) SaveX(ctx context.Context) int {
	affected, err := opu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (opu *OidcProviderUpdate) Exec(ctx context.Context) error {
	_, err := opu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (opu *OidcProviderUpdate) ExecX(ctx context.Context) {
	if err := opu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (opu *OidcProviderUpdate) check() error {
	if v, ok := opu.mutation.Issuer(); ok {
		if err := oidcprovider.IssuerValidator(v); err != nil {
			return &ValidationError{Name: "issuer", err: fmt.Errorf(`ent: validator failed for field "OidcProvider.issuer": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (opu *OidcProviderUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *OidcProviderUpdate {
	opu.modifiers = append(opu.modifiers, modifiers...)
	return opu
}

func (opu *OidcProviderUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := opu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(oidcprovider.Table, oidcprovider.Columns, sqlgraph.NewFieldSpec(oidcprovider.FieldID, field.TypeInt))
	if ps := opu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := opu.mutation.OidcProviderName(); ok {
		_spec.SetField(oidcprovider.FieldOidcProviderName, field.TypeString, value)
	}
	if value, ok := opu.mutation.OidcProviderDescription(); ok {
		_spec.SetField(oidcprovider.FieldOidcProviderDescription, field.TypeString, value)
	}
	if opu.mutation.OidcProviderDescriptionCleared() {
		_spec.ClearField(oidcprovider.FieldOidcProviderDescription, field.TypeString)
	}
	if value, ok := opu.mutation.Issuer(); ok {
		_spec.SetField(oidcprovider.FieldIssuer, field.TypeString, value)
	}
	if value, ok := opu.mutation.ProxyURL(); ok {
		_spec.SetField(oidcprovider.FieldProxyURL, field.TypeString, value)
	}
	if opu.mutation.ProxyURLCleared() {
		_spec.ClearField(oidcprovider.FieldProxyURL, field.TypeString)
	}
	if value, ok := opu.mutation.ClientID(); ok {
		_spec.SetField(oidcprovider.FieldClientID, field.TypeString, value)
	}
	if value, ok := opu.mutation.ClientSecret(); ok {
		_spec.SetField(oidcprovider.FieldClientSecret, field.TypeString, value)
	}
	if value, ok := opu.mutation.RedirectURI(); ok {
		_spec.SetField(oidcprovider.FieldRedirectURI, field.TypeString, value)
	}
	if value, ok := opu.mutation.Endpoints(); ok {
		_spec.SetField(oidcprovider.FieldEndpoints, field.TypeJSON, value)
	}
	if value, ok := opu.mutation.AppendedEndpoints(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, oidcprovider.FieldEndpoints, value)
		})
	}
	if opu.mutation.EndpointsCleared() {
		_spec.ClearField(oidcprovider.FieldEndpoints, field.TypeJSON)
	}
	_spec.Node.Schema = opu.schemaConfig.OidcProvider
	ctx = internal.NewSchemaConfigContext(ctx, opu.schemaConfig)
	_spec.AddModifiers(opu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, opu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{oidcprovider.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	opu.mutation.done = true
	return n, nil
}

// OidcProviderUpdateOne is the builder for updating a single OidcProvider entity.
type OidcProviderUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *OidcProviderMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetOidcProviderName sets the "oidc_provider_name" field.
func (opuo *OidcProviderUpdateOne) SetOidcProviderName(s string) *OidcProviderUpdateOne {
	opuo.mutation.SetOidcProviderName(s)
	return opuo
}

// SetNillableOidcProviderName sets the "oidc_provider_name" field if the given value is not nil.
func (opuo *OidcProviderUpdateOne) SetNillableOidcProviderName(s *string) *OidcProviderUpdateOne {
	if s != nil {
		opuo.SetOidcProviderName(*s)
	}
	return opuo
}

// SetOidcProviderDescription sets the "oidc_provider_description" field.
func (opuo *OidcProviderUpdateOne) SetOidcProviderDescription(s string) *OidcProviderUpdateOne {
	opuo.mutation.SetOidcProviderDescription(s)
	return opuo
}

// SetNillableOidcProviderDescription sets the "oidc_provider_description" field if the given value is not nil.
func (opuo *OidcProviderUpdateOne) SetNillableOidcProviderDescription(s *string) *OidcProviderUpdateOne {
	if s != nil {
		opuo.SetOidcProviderDescription(*s)
	}
	return opuo
}

// ClearOidcProviderDescription clears the value of the "oidc_provider_description" field.
func (opuo *OidcProviderUpdateOne) ClearOidcProviderDescription() *OidcProviderUpdateOne {
	opuo.mutation.ClearOidcProviderDescription()
	return opuo
}

// SetIssuer sets the "issuer" field.
func (opuo *OidcProviderUpdateOne) SetIssuer(s string) *OidcProviderUpdateOne {
	opuo.mutation.SetIssuer(s)
	return opuo
}

// SetNillableIssuer sets the "issuer" field if the given value is not nil.
func (opuo *OidcProviderUpdateOne) SetNillableIssuer(s *string) *OidcProviderUpdateOne {
	if s != nil {
		opuo.SetIssuer(*s)
	}
	return opuo
}

// SetProxyURL sets the "proxy_url" field.
func (opuo *OidcProviderUpdateOne) SetProxyURL(s string) *OidcProviderUpdateOne {
	opuo.mutation.SetProxyURL(s)
	return opuo
}

// SetNillableProxyURL sets the "proxy_url" field if the given value is not nil.
func (opuo *OidcProviderUpdateOne) SetNillableProxyURL(s *string) *OidcProviderUpdateOne {
	if s != nil {
		opuo.SetProxyURL(*s)
	}
	return opuo
}

// ClearProxyURL clears the value of the "proxy_url" field.
func (opuo *OidcProviderUpdateOne) ClearProxyURL() *OidcProviderUpdateOne {
	opuo.mutation.ClearProxyURL()
	return opuo
}

// SetClientID sets the "client_id" field.
func (opuo *OidcProviderUpdateOne) SetClientID(s string) *OidcProviderUpdateOne {
	opuo.mutation.SetClientID(s)
	return opuo
}

// SetNillableClientID sets the "client_id" field if the given value is not nil.
func (opuo *OidcProviderUpdateOne) SetNillableClientID(s *string) *OidcProviderUpdateOne {
	if s != nil {
		opuo.SetClientID(*s)
	}
	return opuo
}

// SetClientSecret sets the "client_secret" field.
func (opuo *OidcProviderUpdateOne) SetClientSecret(s string) *OidcProviderUpdateOne {
	opuo.mutation.SetClientSecret(s)
	return opuo
}

// SetNillableClientSecret sets the "client_secret" field if the given value is not nil.
func (opuo *OidcProviderUpdateOne) SetNillableClientSecret(s *string) *OidcProviderUpdateOne {
	if s != nil {
		opuo.SetClientSecret(*s)
	}
	return opuo
}

// SetRedirectURI sets the "redirect_uri" field.
func (opuo *OidcProviderUpdateOne) SetRedirectURI(s string) *OidcProviderUpdateOne {
	opuo.mutation.SetRedirectURI(s)
	return opuo
}

// SetNillableRedirectURI sets the "redirect_uri" field if the given value is not nil.
func (opuo *OidcProviderUpdateOne) SetNillableRedirectURI(s *string) *OidcProviderUpdateOne {
	if s != nil {
		opuo.SetRedirectURI(*s)
	}
	return opuo
}

// SetEndpoints sets the "endpoints" field.
func (opuo *OidcProviderUpdateOne) SetEndpoints(s []string) *OidcProviderUpdateOne {
	opuo.mutation.SetEndpoints(s)
	return opuo
}

// AppendEndpoints appends s to the "endpoints" field.
func (opuo *OidcProviderUpdateOne) AppendEndpoints(s []string) *OidcProviderUpdateOne {
	opuo.mutation.AppendEndpoints(s)
	return opuo
}

// ClearEndpoints clears the value of the "endpoints" field.
func (opuo *OidcProviderUpdateOne) ClearEndpoints() *OidcProviderUpdateOne {
	opuo.mutation.ClearEndpoints()
	return opuo
}

// Mutation returns the OidcProviderMutation object of the builder.
func (opuo *OidcProviderUpdateOne) Mutation() *OidcProviderMutation {
	return opuo.mutation
}

// Where appends a list predicates to the OidcProviderUpdate builder.
func (opuo *OidcProviderUpdateOne) Where(ps ...predicate.OidcProvider) *OidcProviderUpdateOne {
	opuo.mutation.Where(ps...)
	return opuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (opuo *OidcProviderUpdateOne) Select(field string, fields ...string) *OidcProviderUpdateOne {
	opuo.fields = append([]string{field}, fields...)
	return opuo
}

// Save executes the query and returns the updated OidcProvider entity.
func (opuo *OidcProviderUpdateOne) Save(ctx context.Context) (*OidcProvider, error) {
	return withHooks(ctx, opuo.sqlSave, opuo.mutation, opuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (opuo *OidcProviderUpdateOne) SaveX(ctx context.Context) *OidcProvider {
	node, err := opuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (opuo *OidcProviderUpdateOne) Exec(ctx context.Context) error {
	_, err := opuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (opuo *OidcProviderUpdateOne) ExecX(ctx context.Context) {
	if err := opuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (opuo *OidcProviderUpdateOne) check() error {
	if v, ok := opuo.mutation.Issuer(); ok {
		if err := oidcprovider.IssuerValidator(v); err != nil {
			return &ValidationError{Name: "issuer", err: fmt.Errorf(`ent: validator failed for field "OidcProvider.issuer": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (opuo *OidcProviderUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *OidcProviderUpdateOne {
	opuo.modifiers = append(opuo.modifiers, modifiers...)
	return opuo
}

func (opuo *OidcProviderUpdateOne) sqlSave(ctx context.Context) (_node *OidcProvider, err error) {
	if err := opuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(oidcprovider.Table, oidcprovider.Columns, sqlgraph.NewFieldSpec(oidcprovider.FieldID, field.TypeInt))
	id, ok := opuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "OidcProvider.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := opuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, oidcprovider.FieldID)
		for _, f := range fields {
			if !oidcprovider.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != oidcprovider.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := opuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := opuo.mutation.OidcProviderName(); ok {
		_spec.SetField(oidcprovider.FieldOidcProviderName, field.TypeString, value)
	}
	if value, ok := opuo.mutation.OidcProviderDescription(); ok {
		_spec.SetField(oidcprovider.FieldOidcProviderDescription, field.TypeString, value)
	}
	if opuo.mutation.OidcProviderDescriptionCleared() {
		_spec.ClearField(oidcprovider.FieldOidcProviderDescription, field.TypeString)
	}
	if value, ok := opuo.mutation.Issuer(); ok {
		_spec.SetField(oidcprovider.FieldIssuer, field.TypeString, value)
	}
	if value, ok := opuo.mutation.ProxyURL(); ok {
		_spec.SetField(oidcprovider.FieldProxyURL, field.TypeString, value)
	}
	if opuo.mutation.ProxyURLCleared() {
		_spec.ClearField(oidcprovider.FieldProxyURL, field.TypeString)
	}
	if value, ok := opuo.mutation.ClientID(); ok {
		_spec.SetField(oidcprovider.FieldClientID, field.TypeString, value)
	}
	if value, ok := opuo.mutation.ClientSecret(); ok {
		_spec.SetField(oidcprovider.FieldClientSecret, field.TypeString, value)
	}
	if value, ok := opuo.mutation.RedirectURI(); ok {
		_spec.SetField(oidcprovider.FieldRedirectURI, field.TypeString, value)
	}
	if value, ok := opuo.mutation.Endpoints(); ok {
		_spec.SetField(oidcprovider.FieldEndpoints, field.TypeJSON, value)
	}
	if value, ok := opuo.mutation.AppendedEndpoints(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, oidcprovider.FieldEndpoints, value)
		})
	}
	if opuo.mutation.EndpointsCleared() {
		_spec.ClearField(oidcprovider.FieldEndpoints, field.TypeJSON)
	}
	_spec.Node.Schema = opuo.schemaConfig.OidcProvider
	ctx = internal.NewSchemaConfigContext(ctx, opuo.schemaConfig)
	_spec.AddModifiers(opuo.modifiers...)
	_node = &OidcProvider{config: opuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, opuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{oidcprovider.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	opuo.mutation.done = true
	return _node, nil
}
